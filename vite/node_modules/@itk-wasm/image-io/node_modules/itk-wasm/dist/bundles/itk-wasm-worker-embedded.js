var __defProp = Object.defineProperty;
var __export = (target, all3) => {
  for (var name in all3)
    __defProp(target, name, { get: all3[name], enumerable: true });
};

// src/version.ts
var version = "1.0.0-b.187";
var version_default = version;

// src/interface-types/int-types.ts
var IntTypes = {
  Int8: "int8",
  UInt8: "uint8",
  Int16: "int16",
  UInt16: "uint16",
  Int32: "int32",
  UInt32: "uint32",
  Int64: "int64",
  UInt64: "uint64",
  SizeValueType: "uint64",
  IdentifierType: "uint64",
  IndexValueType: "int64",
  OffsetValueType: "int64"
};
var int_types_default = IntTypes;

// src/interface-types/float-types.ts
var FloatTypes = {
  Float32: "float32",
  Float64: "float64",
  SpacePrecisionType: "float64"
};
var float_types_default = FloatTypes;

// src/buffer-to-typed-array.ts
function bufferToTypedArray(wasmType, buffer) {
  let typedArray = null;
  switch (wasmType) {
    case int_types_default.UInt8: {
      typedArray = new Uint8Array(buffer);
      break;
    }
    case int_types_default.Int8: {
      typedArray = new Int8Array(buffer);
      break;
    }
    case int_types_default.UInt16: {
      typedArray = new Uint16Array(buffer);
      break;
    }
    case int_types_default.Int16: {
      typedArray = new Int16Array(buffer);
      break;
    }
    case int_types_default.UInt32: {
      typedArray = new Uint32Array(buffer);
      break;
    }
    case int_types_default.Int32: {
      typedArray = new Int32Array(buffer);
      break;
    }
    case int_types_default.UInt64: {
      if (typeof globalThis.BigUint64Array === "function") {
        typedArray = new BigUint64Array(buffer);
      } else {
        typedArray = new Uint8Array(buffer);
      }
      break;
    }
    case int_types_default.Int64: {
      if (typeof globalThis.BigInt64Array === "function") {
        typedArray = new BigInt64Array(buffer);
      } else {
        typedArray = new Uint8Array(buffer);
      }
      break;
    }
    case float_types_default.Float32: {
      typedArray = new Float32Array(buffer);
      break;
    }
    case float_types_default.Float64: {
      typedArray = new Float64Array(buffer);
      break;
    }
    case "null": {
      typedArray = null;
      break;
    }
    case null: {
      typedArray = null;
      break;
    }
    default:
      throw new Error("Type is not supported as a TypedArray");
  }
  return typedArray;
}
var buffer_to_typed_array_default = bufferToTypedArray;

// src/interface-types/pixel-types.ts
var PixelTypes = {
  Unknown: "Unknown",
  Scalar: "Scalar",
  RGB: "RGB",
  RGBA: "RGBA",
  Offset: "Offset",
  Vector: "Vector",
  Point: "Point",
  CovariantVector: "CovariantVector",
  SymmetricSecondRankTensor: "SymmetricSecondRankTensor",
  DiffusionTensor3D: "DiffusionTensor3D",
  Complex: "Complex",
  FixedArray: "FixedArray",
  Array: "Array",
  Matrix: "Matrix",
  VariableLengthVector: "VariableLengthVector",
  VariableSizeMatrix: "VariableSizeMatrix"
};
var pixel_types_default = PixelTypes;

// src/interface-types/image-type.ts
var ImageType = class {
  constructor(dimension = 2, componentType = int_types_default.UInt8, pixelType = pixel_types_default.Scalar, components = 1) {
    this.dimension = dimension;
    this.componentType = componentType;
    this.pixelType = pixelType;
    this.components = components;
  }
};
var image_type_default = ImageType;

// src/set-matrix-element.ts
function setMatrixElement(matrixData, columns, row, column, value) {
  matrixData[column + row * columns] = value;
}
var set_matrix_element_default = setMatrixElement;

// src/interface-types/image.ts
var Image = class {
  constructor(imageType = new image_type_default()) {
    this.imageType = imageType;
    const dimension = imageType.dimension;
    this.origin = new Array(dimension);
    this.origin.fill(0);
    this.spacing = new Array(dimension);
    this.spacing.fill(1);
    this.direction = new Float64Array(dimension * dimension);
    this.direction.fill(0);
    for (let ii = 0; ii < dimension; ii++) {
      set_matrix_element_default(this.direction, dimension, ii, ii, 1);
    }
    this.size = new Array(dimension);
    this.size.fill(0);
    this.metadata = /* @__PURE__ */ new Map();
    this.data = null;
  }
  name = "Image";
  origin;
  spacing;
  direction;
  size;
  metadata;
  data;
};
var image_default = Image;

// src/copy-image.ts
function copyImage(image) {
  const copy = new image_default(image.imageType);
  copy.name = image.name;
  copy.origin = Array.from(image.origin);
  copy.spacing = Array.from(image.spacing);
  copy.direction = image.direction.slice();
  copy.size = Array.from(image.size);
  if (image.data !== null) {
    const CTor = image.data.constructor;
    copy.data = new CTor(image.data.length);
    if (copy.data != null) {
      copy.data.set(image.data, 0);
    }
  }
  return copy;
}
var copy_image_default = copyImage;

// src/image-shared-buffer-or-copy.ts
var haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === "function";
function imageSharedBufferOrCopy(image) {
  if (image.data === null) {
    return image;
  }
  if (haveSharedArrayBuffer) {
    if (image.data.buffer instanceof SharedArrayBuffer) {
      return image;
    }
    const sharedBuffer = new SharedArrayBuffer(image.data.buffer.byteLength);
    const CTor = image.data.constructor;
    const sharedTypedArray = new CTor(sharedBuffer);
    if (sharedTypedArray !== null) {
      sharedTypedArray.set(image.data, 0);
    }
    image.data = sharedTypedArray;
    return image;
  } else {
    return copy_image_default(image);
  }
}
var image_shared_buffer_or_copy_default = imageSharedBufferOrCopy;

// src/stack-images.ts
function stackImages(images) {
  if (images.length < 1) {
    throw Error("At least one images is required.");
  }
  const firstImage = images[0];
  if (firstImage.data === null) {
    throw Error("Image data is null.");
  }
  const result = new image_default(firstImage.imageType);
  result.origin = Array.from(firstImage.origin);
  result.spacing = Array.from(firstImage.spacing);
  const dimension = result.imageType.dimension;
  result.direction = firstImage.direction.slice();
  const stackOn = dimension - 1;
  result.size = Array.from(firstImage.size);
  const stackedSize = images.reduce((accumulator, currentValue) => {
    return accumulator + currentValue.size[stackOn];
  }, 0);
  result.size[stackOn] = stackedSize;
  const dataSize = result.size.reduce((accumulator, currentValue) => {
    return accumulator * currentValue;
  }, 1) * result.imageType.components;
  const CTor = firstImage.data.constructor;
  result.data = new CTor(dataSize);
  let offsetBase = result.imageType.components;
  for (let subIndex = 0; subIndex < result.size.length - 1; subIndex++) {
    offsetBase *= result.size[subIndex];
  }
  let stackIndex = 0;
  if (result.data != null) {
    for (let index = 0; index < images.length; index++) {
      result.data.set(images[index].data, offsetBase * stackIndex);
      stackIndex += images[index].size[stackOn];
    }
  } else {
    throw Error("Could not create result image data.");
  }
  return result;
}
var stack_images_default = stackImages;

// src/get-file-extension.ts
function getFileExtension(filePath) {
  let extension = filePath.slice((filePath.lastIndexOf(".") - 1 >>> 0) + 2);
  if (extension.toLowerCase() === "gz") {
    const index = filePath.slice(0, -3).lastIndexOf(".");
    extension = filePath.slice((index - 1 >>> 0) + 2);
  } else if (extension.toLowerCase() === "cbor") {
    const index = filePath.slice(0, -5).lastIndexOf(".");
    extension = filePath.slice((index - 1 >>> 0) + 2);
  } else if (extension.toLowerCase() === "zst") {
    const index = filePath.slice(0, -10).lastIndexOf(".");
    extension = filePath.slice((index - 1 >>> 0) + 2);
  } else if (extension.toLowerCase() === "zip") {
    const index = filePath.slice(0, -4).lastIndexOf(".");
    extension = filePath.slice((index - 1 >>> 0) + 2);
  }
  return extension;
}
var get_file_extension_default = getFileExtension;

// src/get-matrix-element.ts
function getMatrixElement(matrixData, columns, row, column) {
  return matrixData[column + row * columns];
}
var get_matrix_element_default = getMatrixElement;

// src/cast-image.ts
function castImage(inputImage, options) {
  const outputImageType = { ...inputImage.imageType };
  if (typeof options !== "undefined" && typeof options.pixelType !== "undefined") {
    outputImageType.pixelType = options.pixelType;
    if (options.pixelType === pixel_types_default.Scalar && outputImageType.components !== 1) {
      throw new Error("Cannot cast multi-component image to a scalar image");
    }
  }
  if (typeof options !== "undefined" && typeof options.componentType !== "undefined" && options.componentType !== inputImage.imageType.componentType) {
    outputImageType.componentType = options.componentType;
  }
  const outputImage = new image_default(outputImageType);
  outputImage.name = inputImage.name;
  outputImage.origin = Array.from(inputImage.origin);
  outputImage.spacing = Array.from(inputImage.spacing);
  outputImage.direction = inputImage.direction.slice();
  outputImage.size = Array.from(inputImage.size);
  outputImage.metadata = new Map(JSON.parse(JSON.stringify(Array.from(inputImage.metadata))));
  if (inputImage.data !== null) {
    if (typeof options !== "undefined" && typeof options.componentType !== "undefined" && options.componentType !== inputImage.imageType.componentType) {
      switch (inputImage.imageType.componentType) {
        case int_types_default.UInt8:
        case int_types_default.Int8:
        case int_types_default.UInt16:
        case int_types_default.Int16:
        case int_types_default.UInt32:
        case int_types_default.Int32:
        case float_types_default.Float32:
        case float_types_default.Float64:
          switch (outputImage.imageType.componentType) {
            case int_types_default.UInt8:
              outputImage.data = new Uint8Array(inputImage.data);
              break;
            case int_types_default.Int8:
              outputImage.data = new Int8Array(inputImage.data);
              break;
            case int_types_default.UInt16:
              outputImage.data = new Uint16Array(inputImage.data);
              break;
            case int_types_default.Int16:
              outputImage.data = new Int16Array(inputImage.data);
              break;
            case int_types_default.UInt32:
              outputImage.data = new Uint32Array(inputImage.data);
              break;
            case int_types_default.Int32:
              outputImage.data = new Int32Array(inputImage.data);
              break;
            case float_types_default.Float32:
              outputImage.data = new Float32Array(inputImage.data);
              break;
            case float_types_default.Float64:
              outputImage.data = new Float64Array(inputImage.data);
              break;
            case int_types_default.UInt64:
              outputImage.data = new BigUint64Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = BigInt.asIntN(64, BigInt(inputImage.data[idx]));
              }
              break;
            case int_types_default.Int64:
              outputImage.data = new BigInt64Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = BigInt.asUintN(64, BigInt(inputImage.data[idx]));
              }
              break;
          }
          break;
        case int_types_default.UInt64:
        case int_types_default.Int64:
          switch (outputImage.imageType.componentType) {
            case int_types_default.UInt8:
              outputImage.data = new Uint8Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.Int8:
              outputImage.data = new Int8Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.UInt16:
              outputImage.data = new Uint16Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.Int16:
              outputImage.data = new Int16Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.UInt32:
              outputImage.data = new Uint32Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.Int32:
              outputImage.data = new Int32Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case float_types_default.Float32:
              outputImage.data = new Float32Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case float_types_default.Float64:
              outputImage.data = new Float64Array(inputImage.data.length);
              for (let idx = 0; idx < outputImage.data.length; idx++) {
                outputImage.data[idx] = Number(inputImage.data[idx]);
              }
              break;
            case int_types_default.UInt64:
              outputImage.data = new BigUint64Array(inputImage.data);
              break;
            case int_types_default.Int64:
              outputImage.data = new BigInt64Array(inputImage.data);
              break;
          }
          break;
      }
    } else {
      const CTor = inputImage.data.constructor;
      outputImage.data = new CTor(inputImage.data.length);
      if (outputImage.data != null) {
        outputImage.data.set(inputImage.data, 0);
      }
    }
  }
  return outputImage;
}
var cast_image_default = castImage;

// src/worker-pool/worker-pool.ts
var WorkerPool = class {
  fcn;
  workerQueue;
  runInfo;
  /*
   * poolSize is the maximum number of web workers to create in the pool.
   *
   * The function, `fcn,` must accept in its last argument an options object with a
   * `webWorker` property that is a web worker to use for computation. The
   * function must also return a promise that resolves to an object with the
   * with the results of the computation and the used worker in the `webWorker`
   * property.
   *
   **/
  constructor(poolSize, fcn) {
    this.fcn = fcn;
    this.workerQueue = new Array(poolSize);
    this.workerQueue.fill(null);
    this.runInfo = [];
  }
  /*
   * Run the tasks specified by the arguments in the taskArgsArray that will
   * be passed to the pool fcn.
   *
   * An optional progressCallback will be called with the number of complete
   * tasks and the total number of tasks as arguments every time a task has
   * completed.
   *
   * Returns an object containing a promise ('promise') to communicate results
   * as well as an id ('runId') which can be used to cancel any remaining pending
   * tasks before they complete.
   */
  runTasks(taskArgsArray, progressCallback = null) {
    const info = {
      taskQueue: [],
      results: [],
      addingTasks: false,
      postponed: false,
      runningWorkers: 0,
      index: 0,
      completedTasks: 0,
      progressCallback,
      canceled: false
    };
    this.runInfo.push(info);
    info.index = this.runInfo.length - 1;
    return {
      promise: new Promise((resolve, reject) => {
        info.resolve = resolve;
        info.reject = reject;
        info.results = new Array(taskArgsArray.length);
        info.completedTasks = 0;
        info.addingTasks = true;
        taskArgsArray.forEach((taskArg, index) => {
          this.addTask(info.index, index, taskArg);
        });
        info.addingTasks = false;
      }),
      runId: info.index
    };
  }
  terminateWorkers() {
    for (let index = 0; index < this.workerQueue.length; index++) {
      const worker = this.workerQueue[index];
      if (worker != null) {
        worker.terminate();
      }
      this.workerQueue[index] = null;
    }
  }
  cancel(runId) {
    const info = this.runInfo[runId];
    if (info !== null && info !== void 0) {
      info.canceled = true;
    }
  }
  addTask(infoIndex, resultIndex, taskArgs) {
    const info = this.runInfo[infoIndex];
    if (info?.canceled === true) {
      info.reject("Remaining tasks canceled");
      this.clearTask(info.index);
      return;
    }
    if (this.workerQueue.length > 0) {
      const worker = this.workerQueue.pop();
      info.runningWorkers++;
      taskArgs[taskArgs.length - 1].webWorker = worker;
      this.fcn(...taskArgs).then(({ webWorker, ...result }) => {
        this.workerQueue.push(webWorker);
        if (this.runInfo[infoIndex] !== null) {
          info.runningWorkers--;
          info.results[resultIndex] = result;
          info.completedTasks++;
          if (info.progressCallback != null) {
            info.progressCallback(info.completedTasks, info.results.length);
          }
          if (info.taskQueue.length > 0) {
            const reTask = info.taskQueue.shift();
            this.addTask(infoIndex, reTask[0], reTask[1]);
          } else if (!info.addingTasks && info.runningWorkers === 0) {
            const results = info.results;
            info.resolve(results);
            this.clearTask(info.index);
          }
        }
      }).catch((error) => {
        info.reject(error);
        this.clearTask(info.index);
      });
    } else {
      if (info.runningWorkers !== 0 || info.postponed) {
        info.taskQueue.push([resultIndex, taskArgs]);
      } else {
        info.postponed = true;
        setTimeout(() => {
          info.postponed = false;
          this.addTask(info.index, resultIndex, taskArgs);
        }, 50);
      }
    }
  }
  clearTask(clearIndex) {
    this.runInfo[clearIndex].results = [];
    this.runInfo[clearIndex].taskQueue = [];
    this.runInfo[clearIndex].progressCallback = null;
    this.runInfo[clearIndex].canceled = null;
    this.runInfo[clearIndex].reject = () => {
    };
    this.runInfo[clearIndex].resolve = () => {
    };
  }
};
var worker_pool_default = WorkerPool;

// src/interface-types/point-set-type.ts
var PointSetType = class {
  constructor(dimension = 3, pointComponentType = float_types_default.Float32, pointPixelComponentType = float_types_default.Float32, pointPixelType = pixel_types_default.Scalar, pointPixelComponents = 1) {
    this.dimension = dimension;
    this.pointComponentType = pointComponentType;
    this.pointPixelComponentType = pointPixelComponentType;
    this.pointPixelType = pointPixelType;
    this.pointPixelComponents = pointPixelComponents;
  }
};
var point_set_type_default = PointSetType;

// src/interface-types/point-set.ts
var PointSet = class {
  constructor(pointSetType = new point_set_type_default()) {
    this.pointSetType = pointSetType;
    this.name = "PointSet";
    this.numberOfPoints = 0;
    this.points = null;
    this.numberOfPointPixels = 0;
    this.pointData = null;
  }
  name = "PointSet";
  numberOfPoints;
  points;
  numberOfPointPixels;
  pointData;
};
var point_set_default = PointSet;

// src/interface-types/mesh-type.ts
var MeshType = class {
  constructor(dimension = 2, pointComponentType = float_types_default.Float32, pointPixelComponentType = float_types_default.Float32, pointPixelType = pixel_types_default.Scalar, pointPixelComponents = 1, cellComponentType = int_types_default.Int32, cellPixelComponentType = float_types_default.Float32, cellPixelType = pixel_types_default.Scalar, cellPixelComponents = 1) {
    this.dimension = dimension;
    this.pointComponentType = pointComponentType;
    this.pointPixelComponentType = pointPixelComponentType;
    this.pointPixelType = pointPixelType;
    this.pointPixelComponents = pointPixelComponents;
    this.cellComponentType = cellComponentType;
    this.cellPixelComponentType = cellPixelComponentType;
    this.cellPixelType = cellPixelType;
    this.cellPixelComponents = cellPixelComponents;
  }
};
var mesh_type_default = MeshType;

// src/interface-types/mesh.ts
var Mesh = class {
  constructor(meshType = new mesh_type_default()) {
    this.meshType = meshType;
    this.name = "Mesh";
    this.numberOfPoints = 0;
    this.points = null;
    this.numberOfPointPixels = 0;
    this.pointData = null;
    this.numberOfCells = 0;
    this.cellBufferSize = 0;
    this.cells = null;
    this.numberOfCellPixels = 0;
    this.cellData = null;
  }
  name = "Mesh";
  numberOfPoints;
  points;
  numberOfPointPixels;
  pointData;
  numberOfCells;
  cells;
  cellBufferSize;
  numberOfCellPixels;
  cellData;
};
var mesh_default = Mesh;

// src/interface-types/poly-data-type.ts
var PolyDataType = class {
  constructor(pointPixelComponentType = float_types_default.Float32, pointPixelType = pixel_types_default.Scalar, pointPixelComponents = 1, cellPixelComponentType = float_types_default.Float32, cellPixelType = pixel_types_default.Scalar, cellPixelComponents = 1) {
    this.pointPixelComponentType = pointPixelComponentType;
    this.pointPixelType = pointPixelType;
    this.pointPixelComponents = pointPixelComponents;
    this.cellPixelComponentType = cellPixelComponentType;
    this.cellPixelType = cellPixelType;
    this.cellPixelComponents = cellPixelComponents;
  }
};
var poly_data_type_default = PolyDataType;

// src/interface-types/poly-data.ts
var PolyData = class {
  constructor(polyDataType = new poly_data_type_default()) {
    this.polyDataType = polyDataType;
    this.polyDataType = polyDataType;
    this.name = "PolyData";
    this.numberOfPoints = 0;
    this.points = new Float32Array();
    this.verticesBufferSize = 0;
    this.vertices = null;
    this.linesBufferSize = 0;
    this.lines = null;
    this.polygonsBufferSize = 0;
    this.polygons = null;
    this.triangleStripsBufferSize = 0;
    this.triangleStrips = null;
    this.numberOfPointPixels = 0;
    this.pointData = null;
    this.numberOfCellPixels = 0;
    this.cellData = null;
  }
  name = "PolyData";
  numberOfPoints;
  points;
  verticesBufferSize;
  vertices;
  linesBufferSize;
  lines;
  polygonsBufferSize;
  polygons;
  triangleStripsBufferSize;
  triangleStrips;
  numberOfPointPixels;
  pointData;
  numberOfCellPixels;
  cellData;
};
var poly_data_default = PolyData;

// src/interface-types/transform-parameterizations.ts
var TransformParameterizations = {
  Composite: "Composite",
  Identity: "Identity",
  Translation: "Translation",
  Euler2D: "Euler2D",
  Euler3D: "Euler3D",
  Rigid2D: "Rigid2D",
  Rigid3D: "Rigid3D",
  Rigid3DPerspective: "Rigid3DPerspective",
  Versor: "Versor",
  VersorRigid3D: "VersorRigid3D",
  Scale: "Scale",
  ScaleLogarithmic: "ScaleLogarithmic",
  ScaleSkewVersor3D: "ScaleSkewVersor3D",
  Similarity2D: "Similarity2D",
  Similarity3D: "Similarity3D",
  QuaternionRigid: "QuaternionRigid",
  Affine: "Affine",
  ScalableAffine: "ScalableAffine",
  AzimuthElevationToCartesian: "AzimuthElevationToCartesian",
  BSpline: "BSpline",
  BSplineSmoothingOnUpdateDisplacementField: "BSplineSmoothingOnUpdateDisplacementField",
  ConstantVelocityField: "ConstantVelocityField",
  DisplacementField: "DisplacementField",
  GaussianSmoothingOnUpdateDisplacementField: "GaussianSmoothingOnUpdateDisplacementField",
  GaussianExponentialDiffeomorphic: "GaussianExponentialDiffeomorphic",
  VelocityField: "VelocityField",
  TimeVaringVelocityField: "TimeVaringVelocityField",
  GaussianSmoothingOnUpdateTimeVaringVelocityField: "GaussianSmoothingOnUpdateTimeVaringVelocityField"
};
var transform_parameterizations_default = TransformParameterizations;

// src/interface-types/transform-type.ts
var TransformType = class {
  constructor(transformParameterization = transform_parameterizations_default.Identity, parametersValueType = float_types_default.Float64, inputDimension = 3, outputDimension = 3) {
    this.transformParameterization = transformParameterization;
    this.parametersValueType = parametersValueType;
    this.inputDimension = inputDimension;
    this.outputDimension = outputDimension;
  }
};
var transform_type_default = TransformType;

// src/interface-types/transform.ts
var Transform = class {
  transformType;
  numberOfFixedParameters;
  numberOfParameters;
  name = "Transform";
  inputSpaceName;
  outputSpaceName;
  parameters;
  fixedParameters;
  constructor(transformType = new transform_type_default()) {
    this.transformType = transformType;
    this.numberOfFixedParameters = 0;
    this.numberOfParameters = 0;
    this.inputSpaceName = "";
    this.outputSpaceName = "";
    this.parameters = new Uint8Array(0);
    this.fixedParameters = new Uint8Array(0);
  }
};
var transform_default = Transform;

// src/interface-types/interface-types.ts
var InterfaceTypes = {
  TextFile: "TextFile",
  BinaryFile: "BinaryFile",
  TextStream: "TextStream",
  BinaryStream: "BinaryStream",
  Image: "Image",
  PointSet: "PointSet",
  Mesh: "Mesh",
  PolyData: "PolyData",
  TransformList: "TransformList",
  JsonCompatible: "JsonCompatible"
};
var interface_types_default = InterfaceTypes;

// ../../../../node_modules/.pnpm/comlink@4.4.1/node_modules/comlink/dist/esm/comlink.mjs
var proxyMarker = Symbol("Comlink.proxy");
var createEndpoint = Symbol("Comlink.endpoint");
var releaseProxy = Symbol("Comlink.releaseProxy");
var finalizer = Symbol("Comlink.finalizer");
var throwMarker = Symbol("Comlink.thrown");
var isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";
var proxyTransferHandler = {
  canHandle: (val) => isObject(val) && val[proxyMarker],
  serialize(obj) {
    const { port1, port2 } = new MessageChannel();
    expose(obj, port1);
    return [port2, [port2]];
  },
  deserialize(port) {
    port.start();
    return wrap(port);
  }
};
var throwTransferHandler = {
  canHandle: (value) => isObject(value) && throwMarker in value,
  serialize({ value }) {
    let serialized;
    if (value instanceof Error) {
      serialized = {
        isError: true,
        value: {
          message: value.message,
          name: value.name,
          stack: value.stack
        }
      };
    } else {
      serialized = { isError: false, value };
    }
    return [serialized, []];
  },
  deserialize(serialized) {
    if (serialized.isError) {
      throw Object.assign(new Error(serialized.value.message), serialized.value);
    }
    throw serialized.value;
  }
};
var transferHandlers = /* @__PURE__ */ new Map([
  ["proxy", proxyTransferHandler],
  ["throw", throwTransferHandler]
]);
function isAllowedOrigin(allowedOrigins, origin2) {
  for (const allowedOrigin of allowedOrigins) {
    if (origin2 === allowedOrigin || allowedOrigin === "*") {
      return true;
    }
    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin2)) {
      return true;
    }
  }
  return false;
}
function expose(obj, ep = globalThis, allowedOrigins = ["*"]) {
  ep.addEventListener("message", function callback(ev) {
    if (!ev || !ev.data) {
      return;
    }
    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {
      console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);
      return;
    }
    const { id, type, path } = Object.assign({ path: [] }, ev.data);
    const argumentList = (ev.data.argumentList || []).map(fromWireValue);
    let returnValue;
    try {
      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);
      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);
      switch (type) {
        case "GET":
          {
            returnValue = rawValue;
          }
          break;
        case "SET":
          {
            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
            returnValue = true;
          }
          break;
        case "APPLY":
          {
            returnValue = rawValue.apply(parent, argumentList);
          }
          break;
        case "CONSTRUCT":
          {
            const value = new rawValue(...argumentList);
            returnValue = proxy(value);
          }
          break;
        case "ENDPOINT":
          {
            const { port1, port2 } = new MessageChannel();
            expose(obj, port2);
            returnValue = transfer(port1, [port1]);
          }
          break;
        case "RELEASE":
          {
            returnValue = void 0;
          }
          break;
        default:
          return;
      }
    } catch (value) {
      returnValue = { value, [throwMarker]: 0 };
    }
    Promise.resolve(returnValue).catch((value) => {
      return { value, [throwMarker]: 0 };
    }).then((returnValue2) => {
      const [wireValue, transferables] = toWireValue(returnValue2);
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
      if (type === "RELEASE") {
        ep.removeEventListener("message", callback);
        closeEndPoint(ep);
        if (finalizer in obj && typeof obj[finalizer] === "function") {
          obj[finalizer]();
        }
      }
    }).catch((error) => {
      const [wireValue, transferables] = toWireValue({
        value: new TypeError("Unserializable return value"),
        [throwMarker]: 0
      });
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);
    });
  });
  if (ep.start) {
    ep.start();
  }
}
function isMessagePort(endpoint) {
  return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
  if (isMessagePort(endpoint))
    endpoint.close();
}
function wrap(ep, target) {
  return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
  if (isReleased) {
    throw new Error("Proxy has been released and is not useable");
  }
}
function releaseEndpoint(ep) {
  return requestResponseMessage(ep, {
    type: "RELEASE"
  }).then(() => {
    closeEndPoint(ep);
  });
}
var proxyCounter = /* @__PURE__ */ new WeakMap();
var proxyFinalizers = "FinalizationRegistry" in globalThis && new FinalizationRegistry((ep) => {
  const newCount = (proxyCounter.get(ep) || 0) - 1;
  proxyCounter.set(ep, newCount);
  if (newCount === 0) {
    releaseEndpoint(ep);
  }
});
function registerProxy(proxy2, ep) {
  const newCount = (proxyCounter.get(ep) || 0) + 1;
  proxyCounter.set(ep, newCount);
  if (proxyFinalizers) {
    proxyFinalizers.register(proxy2, ep, proxy2);
  }
}
function unregisterProxy(proxy2) {
  if (proxyFinalizers) {
    proxyFinalizers.unregister(proxy2);
  }
}
function createProxy(ep, path = [], target = function() {
}) {
  let isProxyReleased = false;
  const proxy2 = new Proxy(target, {
    get(_target, prop) {
      throwIfProxyReleased(isProxyReleased);
      if (prop === releaseProxy) {
        return () => {
          unregisterProxy(proxy2);
          releaseEndpoint(ep);
          isProxyReleased = true;
        };
      }
      if (prop === "then") {
        if (path.length === 0) {
          return { then: () => proxy2 };
        }
        const r = requestResponseMessage(ep, {
          type: "GET",
          path: path.map((p) => p.toString())
        }).then(fromWireValue);
        return r.then.bind(r);
      }
      return createProxy(ep, [...path, prop]);
    },
    set(_target, prop, rawValue) {
      throwIfProxyReleased(isProxyReleased);
      const [value, transferables] = toWireValue(rawValue);
      return requestResponseMessage(ep, {
        type: "SET",
        path: [...path, prop].map((p) => p.toString()),
        value
      }, transferables).then(fromWireValue);
    },
    apply(_target, _thisArg, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const last = path[path.length - 1];
      if (last === createEndpoint) {
        return requestResponseMessage(ep, {
          type: "ENDPOINT"
        }).then(fromWireValue);
      }
      if (last === "bind") {
        return createProxy(ep, path.slice(0, -1));
      }
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "APPLY",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    },
    construct(_target, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "CONSTRUCT",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    }
  });
  registerProxy(proxy2, ep);
  return proxy2;
}
function myFlat(arr) {
  return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
  const processed = argumentList.map(toWireValue);
  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
var transferCache = /* @__PURE__ */ new WeakMap();
function transfer(obj, transfers) {
  transferCache.set(obj, transfers);
  return obj;
}
function proxy(obj) {
  return Object.assign(obj, { [proxyMarker]: true });
}
function toWireValue(value) {
  for (const [name, handler] of transferHandlers) {
    if (handler.canHandle(value)) {
      const [serializedValue, transferables] = handler.serialize(value);
      return [
        {
          type: "HANDLER",
          name,
          value: serializedValue
        },
        transferables
      ];
    }
  }
  return [
    {
      type: "RAW",
      value
    },
    transferCache.get(value) || []
  ];
}
function fromWireValue(value) {
  switch (value.type) {
    case "HANDLER":
      return transferHandlers.get(value.name).deserialize(value.value);
    case "RAW":
      return value.value;
  }
}
function requestResponseMessage(ep, msg, transfers) {
  return new Promise((resolve) => {
    const id = generateUUID();
    ep.addEventListener("message", function l(ev) {
      if (!ev.data || !ev.data.id || ev.data.id !== id) {
        return;
      }
      ep.removeEventListener("message", l);
      resolve(ev.data);
    });
    if (ep.start) {
      ep.start();
    }
    ep.postMessage(Object.assign({ id }, msg), transfers);
  });
}
function generateUUID() {
  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap2() {
    return fn.apply(thisArg, arguments);
  };
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(/* @__PURE__ */ Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject2 = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype3 = getPrototypeOf(val);
  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject2(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors2) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === void 0 || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];
  const iterator = generator.call(obj);
  let result;
  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(
    /[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors2 = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors2, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
      return false;
    }
    const value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {
};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length | 0];
  }
  return str;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject2(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = void 0;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(
  typeof setImmediate === "function",
  isFunction(_global.postMessage)
);
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject: isObject2,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
  // eslint-disable-next-line func-names
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter2(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/null.js
var null_default = null;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (null_default || FormData)();
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null) return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
            convertValue(el)
          );
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
        formData,
        el,
        utils_default.isString(key) ? key.trim() : key,
        path,
        exposedHelpers
      );
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\0"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype2.toString = function toString2(encoder2) {
  const _encode = encoder2 ? function(value) {
    return encoder2.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/InterceptorManager.js
var InterceptorManager = class {
  constructor() {
    this.handlers = [];
  }
  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
};
var InterceptorManager_default = InterceptorManager;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/FormData.js
var FormData_default = typeof FormData !== "undefined" ? FormData : null;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/Blob.js
var Blob_default = typeof Blob !== "undefined" ? Blob : null;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/index.js
var browser_default = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: Blob_default
  },
  protocols: ["http", "https", "file", "blob", "url", "data"]
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/common/utils.js
var utils_exports = {};
__export(utils_exports, {
  hasBrowserEnv: () => hasBrowserEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  origin: () => origin
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var hasStandardBrowserEnv = ((product) => {
  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
})(typeof navigator !== "undefined" && navigator.product);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/index.js
var platform_default = {
  ...utils_exports,
  ...browser_default
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];
    if (name === "__proto__") return true;
    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils_default.isArray(target) ? target.length : name;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !utils_default.isObject(target[name])) {
      target[name] = [];
    }
    const result = buildPath(path, value, target[name], index);
    if (result && utils_default.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder2) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder2 || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(
          isFileList2 ? { "files[]": data } : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional2 = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*",
      "Content-Type": void 0
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = /* @__PURE__ */ Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value)) return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
var AxiosHeaders = class {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isHeaders(header)) {
      for (const [key, value] of header.entries()) {
        setHeader(value, key, rewrite);
      }
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = /* @__PURE__ */ Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
};
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
  });
  headers.normalize();
  return data;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default(
      "Request failed with status code " + response.status,
      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || "";
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== void 0 ? min : 1e3;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
  };
}
var speedometer_default = speedometer;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1e3 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : void 0;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : void 0,
      bytes: progressBytes,
      rate: rate ? rate : void 0,
      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement("a");
    let originURL;
    function resolveURL(url) {
      let href = url;
      if (msie) {
        urlParsingNode.setAttribute("href", href);
        href = urlParsingNode.href;
      }
      urlParsingNode.setAttribute("href", href);
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
      };
    }
    originURL = resolveURL(window.location.href);
    return function isURLSameOrigin(requestURL) {
      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
  }()
) : (
  // Non standard browser envs (web workers, react-native) lack needed support.
  /* @__PURE__ */ function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  }()
);

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? (
  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + "=" + encodeURIComponent(value)];
      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
      utils_default.isString(path) && cookie.push("path=" + path);
      utils_default.isString(domain) && cookie.push("domain=" + domain);
      secure === true && cookie.push("secure");
      document.cookie = cookie.join("; ");
    },
    read(name) {
      const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  }
) : (
  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {
    },
    read() {
      return null;
    },
    remove() {
    }
  }
);

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(void 0, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(void 0, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(void 0, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
  if (auth) {
    headers.set(
      "Authorization",
      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
    );
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(void 0);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest();
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from(
        "getAllResponseHeaders" in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional2 = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(
        timeoutErrorMessage,
        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
        config,
        request
      ));
      request = null;
    };
    requestData === void 0 && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  let controller = new AbortController();
  let aborted;
  const onabort = function(cancel) {
    if (!aborted) {
      aborted = true;
      unsubscribe();
      const err = cancel instanceof Error ? cancel : this.reason;
      controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
    }
  };
  let timer = timeout && setTimeout(() => {
    onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
  }, timeout);
  const unsubscribe = () => {
    if (signals) {
      timer && clearTimeout(timer);
      timer = null;
      signals.forEach((signal2) => {
        signal2 && (signal2.removeEventListener ? signal2.removeEventListener("abort", onabort) : signal2.unsubscribe(onabort));
      });
      signals = null;
    }
  };
  signals.forEach((signal2) => signal2 && signal2.addEventListener && signal2.addEventListener("abort", onabort));
  const { signal } = controller;
  signal.unsubscribe = unsubscribe;
  return [signal, () => {
    timer && clearTimeout(timer);
    timer = null;
  }];
};
var composeSignals_default = composeSignals;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize, encode3) {
  for await (const chunk of iterable) {
    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode3(String(chunk)), chunkSize);
  }
};
var trackStream = (stream, chunkSize, onProgress, onFinish, encode3) => {
  const iterator = readBytes(stream, chunkSize, encode3);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator.return();
    }
  }, {
    highWaterMark: 2
  });
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder2) => (str) => encoder2.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream(),
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response());
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    return (await new Request(body).arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let [composedSignal, stopTimeout] = signal || cancelToken || timeout ? composeSignals_default([signal, cancelToken], timeout) : [];
  let finished, request;
  const onFinish = () => {
    !finished && setTimeout(() => {
      composedSignal && composedSignal.unsubscribe();
    });
    finished = true;
  };
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(
          requestContentLength,
          progressEventReducer(asyncDecorator(onUploadProgress))
        );
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    request = new Request(url, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: withCredentials
    });
    let response = await fetch(request);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
        responseContentLength,
        progressEventReducer(asyncDecorator(onDownloadProgress), true)
      ) || [];
      response = new Response(
        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
          flush && flush();
          isStreamResponse && onFinish();
        }, encodeText),
        options
      );
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && onFinish();
    stopTimeout && stopTimeout();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    onFinish();
    if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
      throw Object.assign(
        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
        {
          cause: err.cause || err
        }
      );
    }
    throw AxiosError_default.from(err, err && err.code, config, request);
  }
});

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: null_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {
    }
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === void 0) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(
        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
      );
      let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(
        `There is no suitable adapter to dispatch the request ` + s,
        "ERR_NOT_SUPPORT"
      );
    }
    return adapter;
  },
  adapters: knownAdapters
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(
    config,
    config.transformRequest
  );
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/env/data.js
var VERSION = "1.7.4";

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError_default(
        formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")),
        AxiosError_default.ERR_DEPRECATED
      );
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(
        formatMessage(
          opt,
          " has been deprecated since v" + version2 + " and will be removed in the near future"
        )
      );
    }
    return validator ? validator(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === void 0 || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;
var Axios = class {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager_default(),
      response: new InterceptorManager_default()
    };
  }
  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;
        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += "\n" + stack;
          }
        } catch (e) {
        }
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== void 0) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(
      headers.common,
      headers[config.method]
    );
    headers && utils_default.forEach(
      ["delete", "get", "head", "post", "put", "patch", "common"],
      (method) => {
        delete headers[method];
      }
    );
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), void 0];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise = Promise.resolve(config);
      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }
      return promise;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
};
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/CancelToken.js
var CancelToken = class _CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners) return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  /**
   * Subscribe to the cancel signal
   */
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  /**
   * Unsubscribe from the cancel signal
   */
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new _CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
};
var CancelToken_default = CancelToken;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap2(arr) {
    return callback.apply(null, arr);
  };
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance2 = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance2, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance2, context, null, { allOwnKeys: true });
  instance2.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance2;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/index.js
var {
  Axios: Axios2,
  AxiosError: AxiosError2,
  CanceledError: CanceledError2,
  isCancel: isCancel2,
  CancelToken: CancelToken2,
  VERSION: VERSION2,
  all: all2,
  Cancel,
  isAxiosError: isAxiosError2,
  spread: spread2,
  toFormData: toFormData2,
  AxiosHeaders: AxiosHeaders2,
  HttpStatusCode: HttpStatusCode2,
  formToJSON,
  getAdapter,
  mergeConfig: mergeConfig2
} = axios_default;

// src/pipeline/create-web-worker.ts
async function createWebWorker(pipelineWorkerUrl2, queryParams) {
  const workerUrl = pipelineWorkerUrl2;
  let worker = null;
  if (workerUrl == null) {
    worker = new Worker(new URL("./web-workers/itk-wasm-pipeline.worker.js", import.meta.url), { type: "module" });
  } else {
    if (workerUrl.startsWith("http")) {
      const response = await axios_default.get(workerUrl, { responseType: "blob", params: queryParams });
      const workerObjectUrl = URL.createObjectURL(response.data);
      worker = new Worker(workerObjectUrl, { type: "module" });
    } else {
      worker = new Worker(workerUrl, { type: "module" });
    }
  }
  return worker;
}
var create_web_worker_default = createWebWorker;

// src/pipeline/create-worker-proxy.ts
function workerToWorkerProxy(worker) {
  const workerProxy = wrap(worker);
  const itkWebWorker = worker;
  itkWebWorker.terminated = false;
  itkWebWorker.workerProxy = workerProxy;
  itkWebWorker.originalTerminate = itkWebWorker.terminate;
  itkWebWorker.terminate = () => {
    itkWebWorker.terminated = true;
    itkWebWorker.workerProxy[releaseProxy]();
    itkWebWorker.originalTerminate();
  };
  return { workerProxy, worker: itkWebWorker };
}
async function createWorkerProxy(existingWorker, pipelineWorkerUrl2, queryParams) {
  let workerProxy;
  if (existingWorker != null) {
    const itkWebWorker = existingWorker;
    if (itkWebWorker.workerProxy !== void 0) {
      workerProxy = itkWebWorker.workerProxy;
      return { workerProxy, worker: itkWebWorker };
    } else {
      return workerToWorkerProxy(existingWorker);
    }
  }
  const worker = await create_web_worker_default(pipelineWorkerUrl2, queryParams);
  return workerToWorkerProxy(worker);
}
var create_worker_proxy_default = createWorkerProxy;

// ../../../../node_modules/.pnpm/@thewtex+zstddec@0.2.1/node_modules/@thewtex/zstddec/dist/zstddec.modern.js
var init;
var instance;
var heap;
var IMPORT_OBJECT = {
  env: {
    emscripten_notify_memory_growth: function(index) {
      heap = new Uint8Array(instance.exports.memory.buffer);
    }
  }
};
var ZSTDDecoder = class {
  init() {
    if (init) return init;
    if (typeof fetch !== "undefined") {
      init = fetch("data:application/wasm;base64," + wasm).then((response) => response.arrayBuffer()).then((arrayBuffer) => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);
    } else {
      init = WebAssembly.instantiate(Buffer.from(wasm, "base64"), IMPORT_OBJECT).then(this._init);
    }
    return init;
  }
  _init(result) {
    instance = result.instance;
    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0);
  }
  decode(array, uncompressedSize = 0) {
    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);
    const compressedSize = array.byteLength;
    const compressedPtr = instance.exports.malloc(compressedSize);
    heap.set(array, compressedPtr);
    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));
    const uncompressedPtr = instance.exports.malloc(uncompressedSize);
    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);
    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);
    instance.exports.free(compressedPtr);
    instance.exports.free(uncompressedPtr);
    return dec;
  }
};
var wasm = "";

// src/pipeline/internal/load-emscripten-module-main-thread.ts
var decoder = new ZSTDDecoder();
var decoderInitialized = false;
async function loadEmscriptenModuleMainThread(moduleRelativePathOrURL, baseUrl, queryParams) {
  let modulePrefix = "unknown";
  if (typeof moduleRelativePathOrURL !== "string") {
    modulePrefix = moduleRelativePathOrURL.href;
  } else if (moduleRelativePathOrURL.startsWith("http")) {
    modulePrefix = moduleRelativePathOrURL;
  } else {
    modulePrefix = typeof baseUrl !== "undefined" ? `${baseUrl}/${moduleRelativePathOrURL}` : moduleRelativePathOrURL;
  }
  if (modulePrefix.endsWith(".js")) {
    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);
  }
  if (modulePrefix.endsWith(".wasm")) {
    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);
  }
  if (modulePrefix.endsWith(".wasm.zst")) {
    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 9);
  }
  const wasmBinaryPath = `${modulePrefix}.wasm`;
  const response = await axios_default.get(`${wasmBinaryPath}.zst`, {
    responseType: "arraybuffer",
    params: queryParams
  });
  if (!decoderInitialized) {
    await decoder.init();
    decoderInitialized = true;
  }
  const decompressedArray = decoder.decode(new Uint8Array(response.data));
  const wasmBinary = decompressedArray.buffer;
  const fullModulePath = `${modulePrefix}.js`;
  const result = await import(
    /* webpackIgnore: true */
    /* @vite-ignore */
    fullModulePath
  );
  const instantiated = result.default({ wasmBinary });
  return instantiated;
}
var load_emscripten_module_main_thread_default = loadEmscriptenModuleMainThread;

// ../../../../node_modules/.pnpm/wasm-feature-detect@1.6.1/node_modules/wasm-feature-detect/dist/esm/index.js
var simd = async () => WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 5, 1, 96, 0, 1, 123, 3, 2, 1, 0, 10, 10, 1, 8, 0, 65, 0, 253, 15, 253, 98, 11]));

// src/pipeline/internal/run-pipeline-emscripten.ts
var haveSharedArrayBuffer2 = typeof globalThis.SharedArrayBuffer === "function";
var encoder = new TextEncoder();
var decoder2 = new TextDecoder("utf-8");
function readFileSharedArray(emscriptenModule, path) {
  const opts = { flags: "r", encoding: "binary" };
  const stream = emscriptenModule.fs_open(path, opts.flags);
  const stat = emscriptenModule.fs_stat(path);
  const length = stat.size;
  let arrayBufferData = null;
  if (haveSharedArrayBuffer2) {
    arrayBufferData = new SharedArrayBuffer(length);
  } else {
    arrayBufferData = new ArrayBuffer(length);
  }
  const array = new Uint8Array(arrayBufferData);
  emscriptenModule.fs_read(stream, array, 0, length, 0);
  emscriptenModule.fs_close(stream);
  return array;
}
function memoryUint8SharedArray(emscriptenModule, byteOffset, length) {
  let arrayBufferData = null;
  if (haveSharedArrayBuffer2) {
    arrayBufferData = new SharedArrayBuffer(length);
  } else {
    arrayBufferData = new ArrayBuffer(length);
  }
  const array = new Uint8Array(arrayBufferData);
  const dataArrayView = new Uint8Array(
    emscriptenModule.HEAPU8.buffer,
    byteOffset,
    length
  );
  array.set(dataArrayView);
  return array;
}
function setPipelineModuleInputArray(emscriptenModule, dataArray, inputIndex, subIndex) {
  let dataPtr = 0;
  if (dataArray !== null) {
    dataPtr = emscriptenModule.ccall(
      "itk_wasm_input_array_alloc",
      "number",
      ["number", "number", "number", "number"],
      [0, inputIndex, subIndex, dataArray.buffer.byteLength]
    );
    emscriptenModule.HEAPU8.set(new Uint8Array(dataArray.buffer), dataPtr);
  }
  return dataPtr;
}
function setPipelineModuleInputJSON(emscriptenModule, dataObject, inputIndex) {
  const dataJSON = JSON.stringify(dataObject);
  const length = emscriptenModule.lengthBytesUTF8(dataJSON) + 1;
  const jsonPtr = emscriptenModule.ccall(
    "itk_wasm_input_json_alloc",
    "number",
    ["number", "number", "number"],
    [0, inputIndex, length]
  );
  emscriptenModule.stringToUTF8(dataJSON, jsonPtr, length);
}
function getPipelineModuleOutputArray(emscriptenModule, outputIndex, subIndex, componentType) {
  const dataPtr = emscriptenModule.ccall(
    "itk_wasm_output_array_address",
    "number",
    ["number", "number", "number"],
    [0, outputIndex, subIndex]
  );
  const dataSize = emscriptenModule.ccall(
    "itk_wasm_output_array_size",
    "number",
    ["number", "number", "number"],
    [0, outputIndex, subIndex]
  );
  const dataUint8 = memoryUint8SharedArray(emscriptenModule, dataPtr, dataSize);
  const data = buffer_to_typed_array_default(componentType, dataUint8.buffer);
  return data;
}
function getPipelineModuleOutputJSON(emscriptenModule, outputIndex) {
  const jsonPtr = emscriptenModule.ccall(
    "itk_wasm_output_json_address",
    "number",
    ["number", "number"],
    [0, outputIndex]
  );
  const dataJSON = emscriptenModule.UTF8ToString(jsonPtr);
  const dataObject = JSON.parse(dataJSON);
  return dataObject;
}
function runPipelineEmscripten(pipelineModule, args, outputs, inputs) {
  if (!(inputs == null) && inputs.length > 0) {
    inputs.forEach(function(input, index) {
      switch (input.type) {
        case interface_types_default.TextStream: {
          const dataArray = encoder.encode(input.data.data);
          const arrayPtr = setPipelineModuleInputArray(
            pipelineModule,
            dataArray,
            index,
            0
          );
          const dataJSON = {
            size: dataArray.buffer.byteLength,
            data: `data:application/vnd.itk.address,0:${arrayPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);
          break;
        }
        case interface_types_default.JsonCompatible: {
          const dataArray = encoder.encode(JSON.stringify(input.data));
          const arrayPtr = setPipelineModuleInputArray(
            pipelineModule,
            dataArray,
            index,
            0
          );
          const dataJSON = {
            size: dataArray.buffer.byteLength,
            data: `data:application/vnd.itk.address,0:${arrayPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);
          break;
        }
        case interface_types_default.BinaryStream: {
          const dataArray = input.data.data;
          const arrayPtr = setPipelineModuleInputArray(
            pipelineModule,
            dataArray,
            index,
            0
          );
          const dataJSON = {
            size: dataArray.buffer.byteLength,
            data: `data:application/vnd.itk.address,0:${arrayPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);
          break;
        }
        case interface_types_default.TextFile: {
          pipelineModule.fs_writeFile(
            input.data.path,
            input.data.data
          );
          break;
        }
        case interface_types_default.BinaryFile: {
          pipelineModule.fs_writeFile(
            input.data.path,
            input.data.data
          );
          break;
        }
        case interface_types_default.Image: {
          const image = input.data;
          const dataPtr = setPipelineModuleInputArray(
            pipelineModule,
            image.data,
            index,
            0
          );
          const directionPtr = setPipelineModuleInputArray(
            pipelineModule,
            image.direction,
            index,
            1
          );
          const metadata = typeof image.metadata?.entries !== "undefined" ? Array.from(image.metadata.entries()) : [];
          const imageJSON = {
            imageType: image.imageType,
            name: image.name,
            origin: image.origin,
            spacing: image.spacing,
            direction: `data:application/vnd.itk.address,0:${directionPtr}`,
            size: image.size,
            data: `data:application/vnd.itk.address,0:${dataPtr}`,
            metadata
          };
          setPipelineModuleInputJSON(pipelineModule, imageJSON, index);
          break;
        }
        case interface_types_default.Mesh: {
          const mesh = input.data;
          const pointsPtr = setPipelineModuleInputArray(
            pipelineModule,
            mesh.points,
            index,
            0
          );
          const cellsPtr = setPipelineModuleInputArray(
            pipelineModule,
            mesh.cells,
            index,
            1
          );
          const pointDataPtr = setPipelineModuleInputArray(
            pipelineModule,
            mesh.pointData,
            index,
            2
          );
          const cellDataPtr = setPipelineModuleInputArray(
            pipelineModule,
            mesh.cellData,
            index,
            3
          );
          const meshJSON = {
            meshType: mesh.meshType,
            name: mesh.name,
            numberOfPoints: mesh.numberOfPoints,
            points: `data:application/vnd.itk.address,0:${pointsPtr}`,
            numberOfCells: mesh.numberOfCells,
            cells: `data:application/vnd.itk.address,0:${cellsPtr}`,
            cellBufferSize: mesh.cellBufferSize,
            numberOfPointPixels: mesh.numberOfPointPixels,
            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,
            numberOfCellPixels: mesh.numberOfCellPixels,
            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, meshJSON, index);
          break;
        }
        case interface_types_default.PointSet: {
          const pointSet = input.data;
          const pointsPtr = setPipelineModuleInputArray(
            pipelineModule,
            pointSet.points,
            index,
            0
          );
          const pointDataPtr = setPipelineModuleInputArray(
            pipelineModule,
            pointSet.pointData,
            index,
            1
          );
          const pointSetJSON = {
            pointSetType: pointSet.pointSetType,
            name: pointSet.name,
            numberOfPoints: pointSet.numberOfPoints,
            points: `data:application/vnd.itk.address,0:${pointsPtr}`,
            numberOfPointPixels: pointSet.numberOfPointPixels,
            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, pointSetJSON, index);
          break;
        }
        case interface_types_default.TransformList: {
          const transformList = input.data;
          const transformListJSON = [];
          transformList.forEach((transform, transformIndex) => {
            const fixedParameterPtr = setPipelineModuleInputArray(
              pipelineModule,
              transform.fixedParameters,
              index,
              transformIndex * 2
            );
            const fixedParameters = `data:application/vnd.itk.address,0:${fixedParameterPtr}`;
            const parameterPtr = setPipelineModuleInputArray(
              pipelineModule,
              transform.parameters,
              index,
              transformIndex * 2 + 1
            );
            const parameters = `data:application/vnd.itk.address,0:${parameterPtr}`;
            const transformJSON = {
              transformType: transform.transformType,
              numberOfFixedParameters: transform.numberOfFixedParameters,
              numberOfParameters: transform.numberOfParameters,
              name: transform.name,
              inputSpaceName: transform.inputSpaceName,
              outputSpaceName: transform.outputSpaceName,
              parameters,
              fixedParameters
            };
            transformListJSON.push(transformJSON);
          });
          setPipelineModuleInputJSON(pipelineModule, transformListJSON, index);
          break;
        }
        case interface_types_default.PolyData: {
          const polyData = input.data;
          const pointsPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.points,
            index,
            0
          );
          const verticesPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.vertices,
            index,
            1
          );
          const linesPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.lines,
            index,
            2
          );
          const polygonsPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.polygons,
            index,
            3
          );
          const triangleStripsPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.triangleStrips,
            index,
            4
          );
          const pointDataPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.pointData,
            index,
            5
          );
          const cellDataPtr = setPipelineModuleInputArray(
            pipelineModule,
            polyData.pointData,
            index,
            6
          );
          const polyDataJSON = {
            polyDataType: polyData.polyDataType,
            name: polyData.name,
            numberOfPoints: polyData.numberOfPoints,
            points: `data:application/vnd.itk.address,0:${pointsPtr}`,
            verticesBufferSize: polyData.verticesBufferSize,
            vertices: `data:application/vnd.itk.address,0:${verticesPtr}`,
            linesBufferSize: polyData.linesBufferSize,
            lines: `data:application/vnd.itk.address,0:${linesPtr}`,
            polygonsBufferSize: polyData.polygonsBufferSize,
            polygons: `data:application/vnd.itk.address,0:${polygonsPtr}`,
            triangleStripsBufferSize: polyData.triangleStripsBufferSize,
            triangleStrips: `data:application/vnd.itk.address,0:${triangleStripsPtr}`,
            numberOfPointPixels: polyData.numberOfPointPixels,
            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,
            numberOfCellPixels: polyData.numberOfCellPixels,
            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`
          };
          setPipelineModuleInputJSON(pipelineModule, polyDataJSON, index);
          break;
        }
        default:
          throw Error("Unsupported input InterfaceType");
      }
    });
  }
  pipelineModule.resetModuleStdout();
  pipelineModule.resetModuleStderr();
  const stackPtr = pipelineModule.stackSave();
  let returnValue = 0;
  try {
    returnValue = pipelineModule.callMain(args.slice());
  } catch (exception) {
    if (typeof exception === "number") {
      console.log("Exception while running pipeline:");
      console.log("stdout:", pipelineModule.getModuleStdout());
      console.error("stderr:", pipelineModule.getModuleStderr());
      if (typeof pipelineModule.getExceptionMessage !== "undefined") {
        console.error(
          "exception:",
          pipelineModule.getExceptionMessage(exception)
        );
      } else {
        console.error(
          "Build module in Debug mode for exception message information."
        );
      }
    }
    throw exception;
  } finally {
    pipelineModule.stackRestore(stackPtr);
  }
  const stdout = pipelineModule.getModuleStdout();
  const stderr = pipelineModule.getModuleStderr();
  const populatedOutputs = [];
  if (!(outputs == null) && outputs.length > 0 && returnValue === 0) {
    outputs.forEach(function(output, index) {
      let outputData = null;
      switch (output.type) {
        case interface_types_default.TextStream: {
          const dataPtr = pipelineModule.ccall(
            "itk_wasm_output_array_address",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          const dataSize = pipelineModule.ccall(
            "itk_wasm_output_array_size",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          const dataArrayView = new Uint8Array(
            pipelineModule.HEAPU8.buffer,
            dataPtr,
            dataSize
          );
          outputData = { data: decoder2.decode(dataArrayView) };
          break;
        }
        case interface_types_default.JsonCompatible: {
          const dataPtr = pipelineModule.ccall(
            "itk_wasm_output_array_address",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          const dataSize = pipelineModule.ccall(
            "itk_wasm_output_array_size",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          const dataArrayView = new Uint8Array(
            pipelineModule.HEAPU8.buffer,
            dataPtr,
            dataSize
          );
          outputData = JSON.parse(decoder2.decode(dataArrayView));
          break;
        }
        case interface_types_default.BinaryStream: {
          const dataPtr = pipelineModule.ccall(
            "itk_wasm_output_array_address",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          const dataSize = pipelineModule.ccall(
            "itk_wasm_output_array_size",
            "number",
            ["number", "number", "number"],
            [0, index, 0]
          );
          outputData = {
            data: memoryUint8SharedArray(pipelineModule, dataPtr, dataSize)
          };
          break;
        }
        case interface_types_default.TextFile: {
          outputData = {
            path: output.data.path,
            data: pipelineModule.fs_readFile(output.data.path, {
              encoding: "utf8"
            })
          };
          break;
        }
        case interface_types_default.BinaryFile: {
          outputData = {
            path: output.data.path,
            data: readFileSharedArray(
              pipelineModule,
              output.data.path
            )
          };
          break;
        }
        case interface_types_default.Image: {
          const image = getPipelineModuleOutputJSON(
            pipelineModule,
            index
          );
          image.data = getPipelineModuleOutputArray(
            pipelineModule,
            index,
            0,
            image.imageType.componentType
          );
          image.direction = getPipelineModuleOutputArray(
            pipelineModule,
            index,
            1,
            float_types_default.Float64
          );
          image.metadata = new Map(image.metadata);
          outputData = image;
          break;
        }
        case interface_types_default.Mesh: {
          const mesh = getPipelineModuleOutputJSON(
            pipelineModule,
            index
          );
          if (mesh.numberOfPoints > 0) {
            mesh.points = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              0,
              mesh.meshType.pointComponentType
            );
          } else {
            mesh.points = buffer_to_typed_array_default(
              mesh.meshType.pointComponentType,
              new ArrayBuffer(0)
            );
          }
          if (mesh.numberOfCells > 0) {
            mesh.cells = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              1,
              mesh.meshType.cellComponentType
            );
          } else {
            mesh.cells = buffer_to_typed_array_default(
              mesh.meshType.cellComponentType,
              new ArrayBuffer(0)
            );
          }
          if (mesh.numberOfPointPixels > 0) {
            mesh.pointData = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              2,
              mesh.meshType.pointPixelComponentType
            );
          } else {
            mesh.pointData = buffer_to_typed_array_default(
              mesh.meshType.pointPixelComponentType,
              new ArrayBuffer(0)
            );
          }
          if (mesh.numberOfCellPixels > 0) {
            mesh.cellData = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              3,
              mesh.meshType.cellPixelComponentType
            );
          } else {
            mesh.cellData = buffer_to_typed_array_default(
              mesh.meshType.cellPixelComponentType,
              new ArrayBuffer(0)
            );
          }
          outputData = mesh;
          break;
        }
        case interface_types_default.PointSet: {
          const pointSet = getPipelineModuleOutputJSON(
            pipelineModule,
            index
          );
          if (pointSet.numberOfPoints > 0) {
            pointSet.points = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              0,
              pointSet.pointSetType.pointComponentType
            );
          } else {
            pointSet.points = buffer_to_typed_array_default(
              pointSet.pointSetType.pointComponentType,
              new ArrayBuffer(0)
            );
          }
          if (pointSet.numberOfPointPixels > 0) {
            pointSet.pointData = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              1,
              pointSet.pointSetType.pointPixelComponentType
            );
          } else {
            pointSet.pointData = buffer_to_typed_array_default(
              pointSet.pointSetType.pointPixelComponentType,
              new ArrayBuffer(0)
            );
          }
          outputData = pointSet;
          break;
        }
        case interface_types_default.TransformList: {
          const transformList = getPipelineModuleOutputJSON(
            pipelineModule,
            index
          );
          transformList.forEach((transform, transformIndex) => {
            if (transform.numberOfFixedParameters > 0) {
              transformList[transformIndex].fixedParameters = getPipelineModuleOutputArray(
                pipelineModule,
                index,
                transformIndex * 2,
                transform.transformType.parametersValueType
              );
            }
            if (transform.numberOfFixedParameters > 0) {
              transformList[transformIndex].parameters = getPipelineModuleOutputArray(
                pipelineModule,
                index,
                transformIndex * 2 + 1,
                transform.transformType.parametersValueType
              );
            }
          });
          outputData = transformList;
          break;
        }
        case interface_types_default.PolyData: {
          const polyData = getPipelineModuleOutputJSON(
            pipelineModule,
            index
          );
          if (polyData.numberOfPoints > 0) {
            polyData.points = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              0,
              float_types_default.Float32
            );
          } else {
            polyData.points = new Float32Array();
          }
          if (polyData.verticesBufferSize > 0) {
            polyData.vertices = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              1,
              int_types_default.UInt32
            );
          } else {
            polyData.vertices = new Uint32Array();
          }
          if (polyData.linesBufferSize > 0) {
            polyData.lines = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              2,
              int_types_default.UInt32
            );
          } else {
            polyData.lines = new Uint32Array();
          }
          if (polyData.polygonsBufferSize > 0) {
            polyData.polygons = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              3,
              int_types_default.UInt32
            );
          } else {
            polyData.polygons = new Uint32Array();
          }
          if (polyData.triangleStripsBufferSize > 0) {
            polyData.triangleStrips = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              4,
              int_types_default.UInt32
            );
          } else {
            polyData.triangleStrips = new Uint32Array();
          }
          if (polyData.numberOfPointPixels > 0) {
            polyData.pointData = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              5,
              polyData.polyDataType.pointPixelComponentType
            );
          } else {
            polyData.pointData = buffer_to_typed_array_default(
              polyData.polyDataType.pointPixelComponentType,
              new ArrayBuffer(0)
            );
          }
          if (polyData.numberOfCellPixels > 0) {
            polyData.cellData = getPipelineModuleOutputArray(
              pipelineModule,
              index,
              6,
              polyData.polyDataType.cellPixelComponentType
            );
          } else {
            polyData.cellData = buffer_to_typed_array_default(
              polyData.polyDataType.cellPixelComponentType,
              new ArrayBuffer(0)
            );
          }
          outputData = polyData;
          break;
        }
        default:
          throw Error("Unsupported output InterfaceType");
      }
      const populatedOutput = {
        type: output.type,
        data: outputData
      };
      populatedOutputs.push(populatedOutput);
    });
  }
  return { returnValue, stdout, stderr, outputs: populatedOutputs };
}
var run_pipeline_emscripten_default = runPipelineEmscripten;

// src/get-transferables.ts
var haveSharedArrayBuffer3 = typeof globalThis.SharedArrayBuffer !== "undefined";
function getTransferables(data, noCopy) {
  if (data === void 0 || data === null) {
    return [];
  }
  const transferables = [];
  for (let i = 0; i < data.length; i++) {
    const transferable = getTransferable(data[i], noCopy);
    if (transferable !== null) {
      transferables.push(transferable);
    }
  }
  return transferables;
}
function getTransferable(data, noCopy) {
  if (data === void 0 || data === null) {
    return null;
  }
  let result = null;
  if (data.buffer !== void 0) {
    result = data.buffer;
  } else if (data.byteLength !== void 0) {
    result = data;
  }
  if (haveSharedArrayBuffer3 && result instanceof SharedArrayBuffer) {
    return null;
  }
  if (noCopy) {
    return result;
  }
  return result.slice(0);
}
var get_transferables_default = getTransferables;

// src/pipeline/internal/image-transferables.ts
function imageTransferables(image) {
  return [
    image.data,
    image.direction
  ];
}
var image_transferables_default = imageTransferables;

// src/pipeline/internal/mesh-transferables.ts
function meshTransferables(mesh) {
  return [
    mesh.points,
    mesh.pointData,
    mesh.cells,
    mesh.cellData
  ];
}
var mesh_transferables_default = meshTransferables;

// src/pipeline/internal/poly-data-transferables.ts
function polyDataTransferables(polyData) {
  return [
    polyData.points,
    polyData.vertices,
    polyData.lines,
    polyData.polygons,
    polyData.triangleStrips,
    polyData.pointData,
    polyData.cellData
  ];
}
var poly_data_transferables_default = polyDataTransferables;

// src/pipeline/pipelines-base-url.ts
var pipelinesBaseUrl;
function setPipelinesBaseUrl(baseUrl) {
  pipelinesBaseUrl = baseUrl;
}
function getPipelinesBaseUrl() {
  return pipelinesBaseUrl;
}

// src/pipeline/pipelines-query-params.ts
var pipelinesQueryParams;
function setPipelinesQueryParams(queryParams) {
  pipelinesQueryParams = queryParams;
}
function getPipelinesQueryParams() {
  return pipelinesQueryParams;
}

// src/pipeline/pipeline-worker-url.ts
var pipelineWorkerUrl;
function setPipelineWorkerUrl(workerUrl) {
  pipelineWorkerUrl = workerUrl;
}
function getPipelineWorkerUrl() {
  return pipelineWorkerUrl;
}

// src/pipeline/run-pipeline.ts
var pipelineToModule = /* @__PURE__ */ new Map();
function defaultPipelineWorkerUrl() {
  let result = getPipelineWorkerUrl();
  if (typeof result === "undefined") {
    result = null;
  }
  return result;
}
function defaultPipelinesBaseUrl() {
  let result = getPipelinesBaseUrl();
  if (typeof result === "undefined") {
    result = new URL("/pipelines", document.location.origin).href;
  }
  return result;
}
function defaultPipelinesQueryParams() {
  let result = getPipelinesQueryParams();
  if (typeof result === "undefined") {
    result = {};
  }
  return result;
}
async function loadPipelineModule(pipelinePath, pipelineBaseUrl, pipelineQueryParams) {
  let moduleRelativePathOrURL = pipelinePath;
  let pipeline = pipelinePath;
  if (typeof pipelinePath !== "string") {
    moduleRelativePathOrURL = new URL(pipelinePath.href);
    pipeline = moduleRelativePathOrURL.href;
  }
  if (pipelineToModule.has(pipeline)) {
    return pipelineToModule.get(pipeline);
  } else {
    const pipelineModule = await load_emscripten_module_main_thread_default(
      pipelinePath,
      pipelineBaseUrl?.toString() ?? defaultPipelinesBaseUrl(),
      pipelineQueryParams ?? defaultPipelinesQueryParams()
    );
    pipelineToModule.set(pipeline, pipelineModule);
    return pipelineModule;
  }
}
async function runPipeline(pipelinePath, args, outputs, inputs, options) {
  if (!await simd()) {
    const simdErrorMessage = "WebAssembly SIMD support is required -- please update your browser.";
    alert(simdErrorMessage);
    throw new Error(simdErrorMessage);
  }
  const webWorker = options?.webWorker ?? null;
  if (webWorker === false) {
    const pipelineModule = await loadPipelineModule(
      pipelinePath.toString(),
      options?.pipelineBaseUrl,
      options?.pipelineQueryParams ?? defaultPipelinesQueryParams()
    );
    const result2 = run_pipeline_emscripten_default(pipelineModule, args, outputs, inputs);
    return result2;
  }
  let worker = webWorker;
  const pipelineWorkerUrl2 = options?.pipelineWorkerUrl ?? defaultPipelineWorkerUrl();
  const pipelineWorkerUrlString = typeof pipelineWorkerUrl2 !== "string" && typeof pipelineWorkerUrl2?.href !== "undefined" ? pipelineWorkerUrl2.href : pipelineWorkerUrl2;
  const { workerProxy, worker: usedWorker } = await create_worker_proxy_default(
    worker,
    pipelineWorkerUrlString,
    options?.pipelineQueryParams ?? defaultPipelinesQueryParams()
  );
  worker = usedWorker;
  const transferables = [];
  if (!(inputs == null) && inputs.length > 0) {
    inputs.forEach(function(input) {
      if (input.type === interface_types_default.BinaryStream) {
        const dataArray = input.data.data;
        transferables.push(dataArray);
      } else if (input.type === interface_types_default.BinaryFile) {
        const dataArray = input.data.data;
        transferables.push(dataArray);
      } else if (input.type === interface_types_default.Image) {
        const image = input.data;
        if (image.data !== null) {
          transferables.push(...image_transferables_default(image));
        }
      } else if (input.type === interface_types_default.Mesh) {
        const mesh = input.data;
        transferables.push(...mesh_transferables_default(mesh));
      } else if (input.type === interface_types_default.PolyData) {
        const polyData = input.data;
        transferables.push(...poly_data_transferables_default(polyData));
      }
    });
  }
  const pipelineBaseUrl = options?.pipelineBaseUrl ?? defaultPipelinesBaseUrl();
  const pipelineBaseUrlString = typeof pipelineBaseUrl !== "string" && typeof pipelineBaseUrl?.href !== "undefined" ? pipelineBaseUrl.href : pipelineBaseUrl;
  const transferedInputs = inputs != null ? transfer(inputs, get_transferables_default(transferables, options?.noCopy)) : null;
  const result = await workerProxy.runPipeline(
    pipelinePath.toString(),
    pipelineBaseUrlString,
    args,
    outputs,
    transferedInputs,
    options?.pipelineQueryParams ?? defaultPipelinesQueryParams()
  );
  return {
    returnValue: result.returnValue,
    stdout: result.stdout,
    stderr: result.stderr,
    outputs: result.outputs,
    webWorker: worker
  };
}
var run_pipeline_default = runPipeline;

// src/pipeline/default-web-worker.ts
var defaultWebWorker = null;
function setDefaultWebWorker(webWorker) {
  defaultWebWorker = webWorker;
}
function getDefaultWebWorker() {
  return defaultWebWorker;
}

// src/deprecated/read-dicom-tags.ts
async function readDICOMTags(webWorker, file, tags = null) {
  throw new Error("readDICOMTags is deprecated. Use readDicomTags from @itk-wasm/dicom instead.");
}
var read_dicom_tags_default = readDICOMTags;

// src/deprecated/read-dicom-tags-array-buffer.ts
async function readDICOMTagsArrayBuffer(webWorker, arrayBuffer, tags = null) {
  throw new Error("readDICOMTagsArrayBuffer is deprecated. Use readDicomTags from @itk-wasm/dicom instead.");
}
var read_dicom_tags_array_buffer_default = readDICOMTagsArrayBuffer;

// src/deprecated/read-image-dicom-file-series.ts
var readImageDICOMFileSeries = async (fileList, options) => {
  throw new Error("readImageDICOMFileSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.");
};
var read_image_dicom_file_series_default = readImageDICOMFileSeries;

// src/deprecated/read-image-dicom-array-buffer-series.ts
var readImageDICOMArrayBufferSeries = async (arrayBuffers, options, fileNamesBackwardsCompatibility) => {
  throw new Error("readImageDICOMArrayBufferSeries is deprecated. Use readImageDicomFileSeries from @itk-wasm/dicom instead.");
};
var read_image_dicom_array_buffer_series_default = readImageDICOMArrayBufferSeries;

// src/deprecated/mesh-to-poly-data.ts
async function meshToPolyData(webWorker, mesh) {
  throw new Error("This function has been migrated to the @itk-wasm/mesh-to-poly-data package.");
}
var mesh_to_poly_data_default = meshToPolyData;

// src/deprecated/poly-data-to-mesh.ts
async function polyDataToMesh(webWorker, polyData) {
  throw new Error("This function has been migrated to the @itk-wasm/mesh-to-poly-data package.");
}
var poly_data_to_mesh_default = polyDataToMesh;

// src/deprecated/read-image-array-buffer.ts
async function readImageArrayBuffer(webWorker, arrayBuffer, fileName, options) {
  throw new Error("readImageArrayBuffer is deprecated. Use readImage from @itk-wasm/image-io instead.");
}
var read_image_array_buffer_default = readImageArrayBuffer;

// src/deprecated/read-image-blob.ts
async function readImageBlob(webWorker, blob, fileName, options) {
  throw new Error("readImageBlob is deprecated. Use readImage from @itk-wasm/image-io instead.");
}
var read_image_blob_default = readImageBlob;

// src/deprecated/read-image-file.ts
async function readImageFile(webWorker, file, options) {
  throw new Error("readImageFile is deprecated. Use readImage from @itk-wasm/image-io instead.");
}
var read_image_file_default = readImageFile;

// src/deprecated/read-image-file-series.ts
async function readImageFileSeries(fileList, options, zOriginBackwardsCompatibility, sortedSeriesBackwardsCompatibility) {
  throw new Error("readImageFileSeries is deprecated. Use readImageFileSeries from @itk-wasm/image-io instead.");
}
var read_image_file_series_default = readImageFileSeries;

// src/deprecated/read-mesh-array-buffer.ts
async function readMeshArrayBuffer(webWorker, arrayBuffer, fileName, mimeType) {
  throw new Error("readMeshArrayBuffer is deprecated. Use readMesh from @itk-wasm/mesh-io instead.");
}
var read_mesh_array_buffer_default = readMeshArrayBuffer;

// src/deprecated/read-mesh-file.ts
async function readMeshFile(webWorker, file) {
  throw new Error("readMeshFile is deprecated. Use readMesh from @itk-wasm/mesh-io instead.");
}
var read_mesh_file_default = readMeshFile;

// dist/pipeline/web-workers/bundles/itk-wasm-pipeline.worker.js
var itk_wasm_pipeline_worker_default = 'data:text/javascript;charset=utf-8,var __defProp = Object.defineProperty;%0Avar __export = (target, all3) => {%0A  for (var name in all3)%0A    __defProp(target, name, { get: all3[name], enumerable: true });%0A};%0A%0A// ../../../../node_modules/.pnpm/comlink@4.4.1/node_modules/comlink/dist/esm/comlink.mjs%0Avar proxyMarker = Symbol("Comlink.proxy");%0Avar createEndpoint = Symbol("Comlink.endpoint");%0Avar releaseProxy = Symbol("Comlink.releaseProxy");%0Avar finalizer = Symbol("Comlink.finalizer");%0Avar throwMarker = Symbol("Comlink.thrown");%0Avar isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";%0Avar proxyTransferHandler = {%0A  canHandle: (val) => isObject(val) && val[proxyMarker],%0A  serialize(obj) {%0A    const { port1, port2 } = new MessageChannel();%0A    expose(obj, port1);%0A    return [port2, [port2]];%0A  },%0A  deserialize(port) {%0A    port.start();%0A    return wrap(port);%0A  }%0A};%0Avar throwTransferHandler = {%0A  canHandle: (value) => isObject(value) && throwMarker in value,%0A  serialize({ value }) {%0A    let serialized;%0A    if (value instanceof Error) {%0A      serialized = {%0A        isError: true,%0A        value: {%0A          message: value.message,%0A          name: value.name,%0A          stack: value.stack%0A        }%0A      };%0A    } else {%0A      serialized = { isError: false, value };%0A    }%0A    return [serialized, []];%0A  },%0A  deserialize(serialized) {%0A    if (serialized.isError) {%0A      throw Object.assign(new Error(serialized.value.message), serialized.value);%0A    }%0A    throw serialized.value;%0A  }%0A};%0Avar transferHandlers = /* @__PURE__ */ new Map([%0A  ["proxy", proxyTransferHandler],%0A  ["throw", throwTransferHandler]%0A]);%0Afunction isAllowedOrigin(allowedOrigins, origin2) {%0A  for (const allowedOrigin of allowedOrigins) {%0A    if (origin2 === allowedOrigin || allowedOrigin === "*") {%0A      return true;%0A    }%0A    if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin2)) {%0A      return true;%0A    }%0A  }%0A  return false;%0A}%0Afunction expose(obj, ep = globalThis, allowedOrigins = ["*"]) {%0A  ep.addEventListener("message", function callback(ev) {%0A    if (!ev || !ev.data) {%0A      return;%0A    }%0A    if (!isAllowedOrigin(allowedOrigins, ev.origin)) {%0A      console.warn(`Invalid origin \'${ev.origin}\' for comlink proxy`);%0A      return;%0A    }%0A    const { id, type, path } = Object.assign({ path: [] }, ev.data);%0A    const argumentList = (ev.data.argumentList || []).map(fromWireValue);%0A    let returnValue;%0A    try {%0A      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);%0A      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);%0A      switch (type) {%0A        case "GET":%0A          {%0A            returnValue = rawValue;%0A          }%0A          break;%0A        case "SET":%0A          {%0A            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);%0A            returnValue = true;%0A          }%0A          break;%0A        case "APPLY":%0A          {%0A            returnValue = rawValue.apply(parent, argumentList);%0A          }%0A          break;%0A        case "CONSTRUCT":%0A          {%0A            const value = new rawValue(...argumentList);%0A            returnValue = proxy(value);%0A          }%0A          break;%0A        case "ENDPOINT":%0A          {%0A            const { port1, port2 } = new MessageChannel();%0A            expose(obj, port2);%0A            returnValue = transfer(port1, [port1]);%0A          }%0A          break;%0A        case "RELEASE":%0A          {%0A            returnValue = void 0;%0A          }%0A          break;%0A        default:%0A          return;%0A      }%0A    } catch (value) {%0A      returnValue = { value, [throwMarker]: 0 };%0A    }%0A    Promise.resolve(returnValue).catch((value) => {%0A      return { value, [throwMarker]: 0 };%0A    }).then((returnValue2) => {%0A      const [wireValue, transferables] = toWireValue(returnValue2);%0A      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);%0A      if (type === "RELEASE") {%0A        ep.removeEventListener("message", callback);%0A        closeEndPoint(ep);%0A        if (finalizer in obj && typeof obj[finalizer] === "function") {%0A          obj[finalizer]();%0A        }%0A      }%0A    }).catch((error) => {%0A      const [wireValue, transferables] = toWireValue({%0A        value: new TypeError("Unserializable return value"),%0A        [throwMarker]: 0%0A      });%0A      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);%0A    });%0A  });%0A  if (ep.start) {%0A    ep.start();%0A  }%0A}%0Afunction isMessagePort(endpoint) {%0A  return endpoint.constructor.name === "MessagePort";%0A}%0Afunction closeEndPoint(endpoint) {%0A  if (isMessagePort(endpoint))%0A    endpoint.close();%0A}%0Afunction wrap(ep, target) {%0A  return createProxy(ep, [], target);%0A}%0Afunction throwIfProxyReleased(isReleased) {%0A  if (isReleased) {%0A    throw new Error("Proxy has been released and is not useable");%0A  }%0A}%0Afunction releaseEndpoint(ep) {%0A  return requestResponseMessage(ep, {%0A    type: "RELEASE"%0A  }).then(() => {%0A    closeEndPoint(ep);%0A  });%0A}%0Avar proxyCounter = /* @__PURE__ */ new WeakMap();%0Avar proxyFinalizers = "FinalizationRegistry" in globalThis && new FinalizationRegistry((ep) => {%0A  const newCount = (proxyCounter.get(ep) || 0) - 1;%0A  proxyCounter.set(ep, newCount);%0A  if (newCount === 0) {%0A    releaseEndpoint(ep);%0A  }%0A});%0Afunction registerProxy(proxy2, ep) {%0A  const newCount = (proxyCounter.get(ep) || 0) + 1;%0A  proxyCounter.set(ep, newCount);%0A  if (proxyFinalizers) {%0A    proxyFinalizers.register(proxy2, ep, proxy2);%0A  }%0A}%0Afunction unregisterProxy(proxy2) {%0A  if (proxyFinalizers) {%0A    proxyFinalizers.unregister(proxy2);%0A  }%0A}%0Afunction createProxy(ep, path = [], target = function() {%0A}) {%0A  let isProxyReleased = false;%0A  const proxy2 = new Proxy(target, {%0A    get(_target, prop) {%0A      throwIfProxyReleased(isProxyReleased);%0A      if (prop === releaseProxy) {%0A        return () => {%0A          unregisterProxy(proxy2);%0A          releaseEndpoint(ep);%0A          isProxyReleased = true;%0A        };%0A      }%0A      if (prop === "then") {%0A        if (path.length === 0) {%0A          return { then: () => proxy2 };%0A        }%0A        const r = requestResponseMessage(ep, {%0A          type: "GET",%0A          path: path.map((p) => p.toString())%0A        }).then(fromWireValue);%0A        return r.then.bind(r);%0A      }%0A      return createProxy(ep, [...path, prop]);%0A    },%0A    set(_target, prop, rawValue) {%0A      throwIfProxyReleased(isProxyReleased);%0A      const [value, transferables] = toWireValue(rawValue);%0A      return requestResponseMessage(ep, {%0A        type: "SET",%0A        path: [...path, prop].map((p) => p.toString()),%0A        value%0A      }, transferables).then(fromWireValue);%0A    },%0A    apply(_target, _thisArg, rawArgumentList) {%0A      throwIfProxyReleased(isProxyReleased);%0A      const last = path[path.length - 1];%0A      if (last === createEndpoint) {%0A        return requestResponseMessage(ep, {%0A          type: "ENDPOINT"%0A        }).then(fromWireValue);%0A      }%0A      if (last === "bind") {%0A        return createProxy(ep, path.slice(0, -1));%0A      }%0A      const [argumentList, transferables] = processArguments(rawArgumentList);%0A      return requestResponseMessage(ep, {%0A        type: "APPLY",%0A        path: path.map((p) => p.toString()),%0A        argumentList%0A      }, transferables).then(fromWireValue);%0A    },%0A    construct(_target, rawArgumentList) {%0A      throwIfProxyReleased(isProxyReleased);%0A      const [argumentList, transferables] = processArguments(rawArgumentList);%0A      return requestResponseMessage(ep, {%0A        type: "CONSTRUCT",%0A        path: path.map((p) => p.toString()),%0A        argumentList%0A      }, transferables).then(fromWireValue);%0A    }%0A  });%0A  registerProxy(proxy2, ep);%0A  return proxy2;%0A}%0Afunction myFlat(arr) {%0A  return Array.prototype.concat.apply([], arr);%0A}%0Afunction processArguments(argumentList) {%0A  const processed = argumentList.map(toWireValue);%0A  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];%0A}%0Avar transferCache = /* @__PURE__ */ new WeakMap();%0Afunction transfer(obj, transfers) {%0A  transferCache.set(obj, transfers);%0A  return obj;%0A}%0Afunction proxy(obj) {%0A  return Object.assign(obj, { [proxyMarker]: true });%0A}%0Afunction toWireValue(value) {%0A  for (const [name, handler] of transferHandlers) {%0A    if (handler.canHandle(value)) {%0A      const [serializedValue, transferables] = handler.serialize(value);%0A      return [%0A        {%0A          type: "HANDLER",%0A          name,%0A          value: serializedValue%0A        },%0A        transferables%0A      ];%0A    }%0A  }%0A  return [%0A    {%0A      type: "RAW",%0A      value%0A    },%0A    transferCache.get(value) || []%0A  ];%0A}%0Afunction fromWireValue(value) {%0A  switch (value.type) {%0A    case "HANDLER":%0A      return transferHandlers.get(value.name).deserialize(value.value);%0A    case "RAW":%0A      return value.value;%0A  }%0A}%0Afunction requestResponseMessage(ep, msg, transfers) {%0A  return new Promise((resolve) => {%0A    const id = generateUUID();%0A    ep.addEventListener("message", function l(ev) {%0A      if (!ev.data || !ev.data.id || ev.data.id !== id) {%0A        return;%0A      }%0A      ep.removeEventListener("message", l);%0A      resolve(ev.data);%0A    });%0A    if (ep.start) {%0A      ep.start();%0A    }%0A    ep.postMessage(Object.assign({ id }, msg), transfers);%0A  });%0A}%0Afunction generateUUID() {%0A  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/bind.js%0Afunction bind(fn, thisArg) {%0A  return function wrap2() {%0A    return fn.apply(thisArg, arguments);%0A  };%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/utils.js%0Avar { toString } = Object.prototype;%0Avar { getPrototypeOf } = Object;%0Avar kindOf = /* @__PURE__ */ ((cache) => (thing) => {%0A  const str = toString.call(thing);%0A  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());%0A})(/* @__PURE__ */ Object.create(null));%0Avar kindOfTest = (type) => {%0A  type = type.toLowerCase();%0A  return (thing) => kindOf(thing) === type;%0A};%0Avar typeOfTest = (type) => (thing) => typeof thing === type;%0Avar { isArray } = Array;%0Avar isUndefined = typeOfTest("undefined");%0Afunction isBuffer(val) {%0A  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);%0A}%0Avar isArrayBuffer = kindOfTest("ArrayBuffer");%0Afunction isArrayBufferView(val) {%0A  let result;%0A  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {%0A    result = ArrayBuffer.isView(val);%0A  } else {%0A    result = val && val.buffer && isArrayBuffer(val.buffer);%0A  }%0A  return result;%0A}%0Avar isString = typeOfTest("string");%0Avar isFunction = typeOfTest("function");%0Avar isNumber = typeOfTest("number");%0Avar isObject2 = (thing) => thing !== null && typeof thing === "object";%0Avar isBoolean = (thing) => thing === true || thing === false;%0Avar isPlainObject = (val) => {%0A  if (kindOf(val) !== "object") {%0A    return false;%0A  }%0A  const prototype3 = getPrototypeOf(val);%0A  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);%0A};%0Avar isDate = kindOfTest("Date");%0Avar isFile = kindOfTest("File");%0Avar isBlob = kindOfTest("Blob");%0Avar isFileList = kindOfTest("FileList");%0Avar isStream = (val) => isObject2(val) && isFunction(val.pipe);%0Avar isFormData = (thing) => {%0A  let kind;%0A  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance%0A  kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));%0A};%0Avar isURLSearchParams = kindOfTest("URLSearchParams");%0Avar [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);%0Avar trim = (str) => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, "");%0Afunction forEach(obj, fn, { allOwnKeys = false } = {}) {%0A  if (obj === null || typeof obj === "undefined") {%0A    return;%0A  }%0A  let i;%0A  let l;%0A  if (typeof obj !== "object") {%0A    obj = [obj];%0A  }%0A  if (isArray(obj)) {%0A    for (i = 0, l = obj.length; i < l; i++) {%0A      fn.call(null, obj[i], i, obj);%0A    }%0A  } else {%0A    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);%0A    const len = keys.length;%0A    let key;%0A    for (i = 0; i < len; i++) {%0A      key = keys[i];%0A      fn.call(null, obj[key], key, obj);%0A    }%0A  }%0A}%0Afunction findKey(obj, key) {%0A  key = key.toLowerCase();%0A  const keys = Object.keys(obj);%0A  let i = keys.length;%0A  let _key;%0A  while (i-- > 0) {%0A    _key = keys[i];%0A    if (key === _key.toLowerCase()) {%0A      return _key;%0A    }%0A  }%0A  return null;%0A}%0Avar _global = (() => {%0A  if (typeof globalThis !== "undefined") return globalThis;%0A  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;%0A})();%0Avar isContextDefined = (context) => !isUndefined(context) && context !== _global;%0Afunction merge() {%0A  const { caseless } = isContextDefined(this) && this || {};%0A  const result = {};%0A  const assignValue = (val, key) => {%0A    const targetKey = caseless && findKey(result, key) || key;%0A    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {%0A      result[targetKey] = merge(result[targetKey], val);%0A    } else if (isPlainObject(val)) {%0A      result[targetKey] = merge({}, val);%0A    } else if (isArray(val)) {%0A      result[targetKey] = val.slice();%0A    } else {%0A      result[targetKey] = val;%0A    }%0A  };%0A  for (let i = 0, l = arguments.length; i < l; i++) {%0A    arguments[i] && forEach(arguments[i], assignValue);%0A  }%0A  return result;%0A}%0Avar extend = (a, b, thisArg, { allOwnKeys } = {}) => {%0A  forEach(b, (val, key) => {%0A    if (thisArg && isFunction(val)) {%0A      a[key] = bind(val, thisArg);%0A    } else {%0A      a[key] = val;%0A    }%0A  }, { allOwnKeys });%0A  return a;%0A};%0Avar stripBOM = (content) => {%0A  if (content.charCodeAt(0) === 65279) {%0A    content = content.slice(1);%0A  }%0A  return content;%0A};%0Avar inherits = (constructor, superConstructor, props, descriptors2) => {%0A  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);%0A  constructor.prototype.constructor = constructor;%0A  Object.defineProperty(constructor, "super", {%0A    value: superConstructor.prototype%0A  });%0A  props && Object.assign(constructor.prototype, props);%0A};%0Avar toFlatObject = (sourceObj, destObj, filter2, propFilter) => {%0A  let props;%0A  let i;%0A  let prop;%0A  const merged = {};%0A  destObj = destObj || {};%0A  if (sourceObj == null) return destObj;%0A  do {%0A    props = Object.getOwnPropertyNames(sourceObj);%0A    i = props.length;%0A    while (i-- > 0) {%0A      prop = props[i];%0A      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {%0A        destObj[prop] = sourceObj[prop];%0A        merged[prop] = true;%0A      }%0A    }%0A    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);%0A  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);%0A  return destObj;%0A};%0Avar endsWith = (str, searchString, position) => {%0A  str = String(str);%0A  if (position === void 0 || position > str.length) {%0A    position = str.length;%0A  }%0A  position -= searchString.length;%0A  const lastIndex = str.indexOf(searchString, position);%0A  return lastIndex !== -1 && lastIndex === position;%0A};%0Avar toArray = (thing) => {%0A  if (!thing) return null;%0A  if (isArray(thing)) return thing;%0A  let i = thing.length;%0A  if (!isNumber(i)) return null;%0A  const arr = new Array(i);%0A  while (i-- > 0) {%0A    arr[i] = thing[i];%0A  }%0A  return arr;%0A};%0Avar isTypedArray = /* @__PURE__ */ ((TypedArray) => {%0A  return (thing) => {%0A    return TypedArray && thing instanceof TypedArray;%0A  };%0A})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));%0Avar forEachEntry = (obj, fn) => {%0A  const generator = obj && obj[Symbol.iterator];%0A  const iterator = generator.call(obj);%0A  let result;%0A  while ((result = iterator.next()) && !result.done) {%0A    const pair = result.value;%0A    fn.call(obj, pair[0], pair[1]);%0A  }%0A};%0Avar matchAll = (regExp, str) => {%0A  let matches;%0A  const arr = [];%0A  while ((matches = regExp.exec(str)) !== null) {%0A    arr.push(matches);%0A  }%0A  return arr;%0A};%0Avar isHTMLForm = kindOfTest("HTMLFormElement");%0Avar toCamelCase = (str) => {%0A  return str.toLowerCase().replace(%0A    /[-_\\s]([a-z\\d])(\\w*)/g,%0A    function replacer(m, p1, p2) {%0A      return p1.toUpperCase() + p2;%0A    }%0A  );%0A};%0Avar hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);%0Avar isRegExp = kindOfTest("RegExp");%0Avar reduceDescriptors = (obj, reducer) => {%0A  const descriptors2 = Object.getOwnPropertyDescriptors(obj);%0A  const reducedDescriptors = {};%0A  forEach(descriptors2, (descriptor, name) => {%0A    let ret;%0A    if ((ret = reducer(descriptor, name, obj)) !== false) {%0A      reducedDescriptors[name] = ret || descriptor;%0A    }%0A  });%0A  Object.defineProperties(obj, reducedDescriptors);%0A};%0Avar freezeMethods = (obj) => {%0A  reduceDescriptors(obj, (descriptor, name) => {%0A    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {%0A      return false;%0A    }%0A    const value = obj[name];%0A    if (!isFunction(value)) return;%0A    descriptor.enumerable = false;%0A    if ("writable" in descriptor) {%0A      descriptor.writable = false;%0A      return;%0A    }%0A    if (!descriptor.set) {%0A      descriptor.set = () => {%0A        throw Error("Can not rewrite read-only method \'" + name + "\'");%0A      };%0A    }%0A  });%0A};%0Avar toObjectSet = (arrayOrString, delimiter) => {%0A  const obj = {};%0A  const define = (arr) => {%0A    arr.forEach((value) => {%0A      obj[value] = true;%0A    });%0A  };%0A  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));%0A  return obj;%0A};%0Avar noop = () => {%0A};%0Avar toFiniteNumber = (value, defaultValue) => {%0A  return value != null && Number.isFinite(value = +value) ? value : defaultValue;%0A};%0Avar ALPHA = "abcdefghijklmnopqrstuvwxyz";%0Avar DIGIT = "0123456789";%0Avar ALPHABET = {%0A  DIGIT,%0A  ALPHA,%0A  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT%0A};%0Avar generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {%0A  let str = "";%0A  const { length } = alphabet;%0A  while (size--) {%0A    str += alphabet[Math.random() * length | 0];%0A  }%0A  return str;%0A};%0Afunction isSpecCompliantForm(thing) {%0A  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);%0A}%0Avar toJSONObject = (obj) => {%0A  const stack = new Array(10);%0A  const visit = (source, i) => {%0A    if (isObject2(source)) {%0A      if (stack.indexOf(source) >= 0) {%0A        return;%0A      }%0A      if (!("toJSON" in source)) {%0A        stack[i] = source;%0A        const target = isArray(source) ? [] : {};%0A        forEach(source, (value, key) => {%0A          const reducedValue = visit(value, i + 1);%0A          !isUndefined(reducedValue) && (target[key] = reducedValue);%0A        });%0A        stack[i] = void 0;%0A        return target;%0A      }%0A    }%0A    return source;%0A  };%0A  return visit(obj, 0);%0A};%0Avar isAsyncFn = kindOfTest("AsyncFunction");%0Avar isThenable = (thing) => thing && (isObject2(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);%0Avar _setImmediate = ((setImmediateSupported, postMessageSupported) => {%0A  if (setImmediateSupported) {%0A    return setImmediate;%0A  }%0A  return postMessageSupported ? ((token, callbacks) => {%0A    _global.addEventListener("message", ({ source, data }) => {%0A      if (source === _global && data === token) {%0A        callbacks.length && callbacks.shift()();%0A      }%0A    }, false);%0A    return (cb) => {%0A      callbacks.push(cb);%0A      _global.postMessage(token, "*");%0A    };%0A  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);%0A})(%0A  typeof setImmediate === "function",%0A  isFunction(_global.postMessage)%0A);%0Avar asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;%0Avar utils_default = {%0A  isArray,%0A  isArrayBuffer,%0A  isBuffer,%0A  isFormData,%0A  isArrayBufferView,%0A  isString,%0A  isNumber,%0A  isBoolean,%0A  isObject: isObject2,%0A  isPlainObject,%0A  isReadableStream,%0A  isRequest,%0A  isResponse,%0A  isHeaders,%0A  isUndefined,%0A  isDate,%0A  isFile,%0A  isBlob,%0A  isRegExp,%0A  isFunction,%0A  isStream,%0A  isURLSearchParams,%0A  isTypedArray,%0A  isFileList,%0A  forEach,%0A  merge,%0A  extend,%0A  trim,%0A  stripBOM,%0A  inherits,%0A  toFlatObject,%0A  kindOf,%0A  kindOfTest,%0A  endsWith,%0A  toArray,%0A  forEachEntry,%0A  matchAll,%0A  isHTMLForm,%0A  hasOwnProperty,%0A  hasOwnProp: hasOwnProperty,%0A  // an alias to avoid ESLint no-prototype-builtins detection%0A  reduceDescriptors,%0A  freezeMethods,%0A  toObjectSet,%0A  toCamelCase,%0A  noop,%0A  toFiniteNumber,%0A  findKey,%0A  global: _global,%0A  isContextDefined,%0A  ALPHABET,%0A  generateString,%0A  isSpecCompliantForm,%0A  toJSONObject,%0A  isAsyncFn,%0A  isThenable,%0A  setImmediate: _setImmediate,%0A  asap%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/AxiosError.js%0Afunction AxiosError(message, code, config, request, response) {%0A  Error.call(this);%0A  if (Error.captureStackTrace) {%0A    Error.captureStackTrace(this, this.constructor);%0A  } else {%0A    this.stack = new Error().stack;%0A  }%0A  this.message = message;%0A  this.name = "AxiosError";%0A  code && (this.code = code);%0A  config && (this.config = config);%0A  request && (this.request = request);%0A  response && (this.response = response);%0A}%0Autils_default.inherits(AxiosError, Error, {%0A  toJSON: function toJSON() {%0A    return {%0A      // Standard%0A      message: this.message,%0A      name: this.name,%0A      // Microsoft%0A      description: this.description,%0A      number: this.number,%0A      // Mozilla%0A      fileName: this.fileName,%0A      lineNumber: this.lineNumber,%0A      columnNumber: this.columnNumber,%0A      stack: this.stack,%0A      // Axios%0A      config: utils_default.toJSONObject(this.config),%0A      code: this.code,%0A      status: this.response && this.response.status ? this.response.status : null%0A    };%0A  }%0A});%0Avar prototype = AxiosError.prototype;%0Avar descriptors = {};%0A[%0A  "ERR_BAD_OPTION_VALUE",%0A  "ERR_BAD_OPTION",%0A  "ECONNABORTED",%0A  "ETIMEDOUT",%0A  "ERR_NETWORK",%0A  "ERR_FR_TOO_MANY_REDIRECTS",%0A  "ERR_DEPRECATED",%0A  "ERR_BAD_RESPONSE",%0A  "ERR_BAD_REQUEST",%0A  "ERR_CANCELED",%0A  "ERR_NOT_SUPPORT",%0A  "ERR_INVALID_URL"%0A  // eslint-disable-next-line func-names%0A].forEach((code) => {%0A  descriptors[code] = { value: code };%0A});%0AObject.defineProperties(AxiosError, descriptors);%0AObject.defineProperty(prototype, "isAxiosError", { value: true });%0AAxiosError.from = (error, code, config, request, response, customProps) => {%0A  const axiosError = Object.create(prototype);%0A  utils_default.toFlatObject(error, axiosError, function filter2(obj) {%0A    return obj !== Error.prototype;%0A  }, (prop) => {%0A    return prop !== "isAxiosError";%0A  });%0A  AxiosError.call(axiosError, error.message, code, config, request, response);%0A  axiosError.cause = error;%0A  axiosError.name = error.name;%0A  customProps && Object.assign(axiosError, customProps);%0A  return axiosError;%0A};%0Avar AxiosError_default = AxiosError;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/null.js%0Avar null_default = null;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/toFormData.js%0Afunction isVisitable(thing) {%0A  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);%0A}%0Afunction removeBrackets(key) {%0A  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;%0A}%0Afunction renderKey(path, key, dots) {%0A  if (!path) return key;%0A  return path.concat(key).map(function each(token, i) {%0A    token = removeBrackets(token);%0A    return !dots && i ? "[" + token + "]" : token;%0A  }).join(dots ? "." : "");%0A}%0Afunction isFlatArray(arr) {%0A  return utils_default.isArray(arr) && !arr.some(isVisitable);%0A}%0Avar predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {%0A  return /^is[A-Z]/.test(prop);%0A});%0Afunction toFormData(obj, formData, options) {%0A  if (!utils_default.isObject(obj)) {%0A    throw new TypeError("target must be an object");%0A  }%0A  formData = formData || new (null_default || FormData)();%0A  options = utils_default.toFlatObject(options, {%0A    metaTokens: true,%0A    dots: false,%0A    indexes: false%0A  }, false, function defined(option, source) {%0A    return !utils_default.isUndefined(source[option]);%0A  });%0A  const metaTokens = options.metaTokens;%0A  const visitor = options.visitor || defaultVisitor;%0A  const dots = options.dots;%0A  const indexes = options.indexes;%0A  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;%0A  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);%0A  if (!utils_default.isFunction(visitor)) {%0A    throw new TypeError("visitor must be a function");%0A  }%0A  function convertValue(value) {%0A    if (value === null) return "";%0A    if (utils_default.isDate(value)) {%0A      return value.toISOString();%0A    }%0A    if (!useBlob && utils_default.isBlob(value)) {%0A      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");%0A    }%0A    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {%0A      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);%0A    }%0A    return value;%0A  }%0A  function defaultVisitor(value, key, path) {%0A    let arr = value;%0A    if (value && !path && typeof value === "object") {%0A      if (utils_default.endsWith(key, "{}")) {%0A        key = metaTokens ? key : key.slice(0, -2);%0A        value = JSON.stringify(value);%0A      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {%0A        key = removeBrackets(key);%0A        arr.forEach(function each(el, index) {%0A          !(utils_default.isUndefined(el) || el === null) && formData.append(%0A            // eslint-disable-next-line no-nested-ternary%0A            indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",%0A            convertValue(el)%0A          );%0A        });%0A        return false;%0A      }%0A    }%0A    if (isVisitable(value)) {%0A      return true;%0A    }%0A    formData.append(renderKey(path, key, dots), convertValue(value));%0A    return false;%0A  }%0A  const stack = [];%0A  const exposedHelpers = Object.assign(predicates, {%0A    defaultVisitor,%0A    convertValue,%0A    isVisitable%0A  });%0A  function build(value, path) {%0A    if (utils_default.isUndefined(value)) return;%0A    if (stack.indexOf(value) !== -1) {%0A      throw Error("Circular reference detected in " + path.join("."));%0A    }%0A    stack.push(value);%0A    utils_default.forEach(value, function each(el, key) {%0A      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(%0A        formData,%0A        el,%0A        utils_default.isString(key) ? key.trim() : key,%0A        path,%0A        exposedHelpers%0A      );%0A      if (result === true) {%0A        build(el, path ? path.concat(key) : [key]);%0A      }%0A    });%0A    stack.pop();%0A  }%0A  if (!utils_default.isObject(obj)) {%0A    throw new TypeError("data must be an object");%0A  }%0A  build(obj);%0A  return formData;%0A}%0Avar toFormData_default = toFormData;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/AxiosURLSearchParams.js%0Afunction encode(str) {%0A  const charMap = {%0A    "!": "%2521",%0A    "\'": "%2527",%0A    "(": "%2528",%0A    ")": "%2529",%0A    "~": "%257E",%0A    "%2520": "+",%0A    "%2500": "\\0"%0A  };%0A  return encodeURIComponent(str).replace(/[!\'()~]|%2520|%2500/g, function replacer(match) {%0A    return charMap[match];%0A  });%0A}%0Afunction AxiosURLSearchParams(params, options) {%0A  this._pairs = [];%0A  params && toFormData_default(params, this, options);%0A}%0Avar prototype2 = AxiosURLSearchParams.prototype;%0Aprototype2.append = function append(name, value) {%0A  this._pairs.push([name, value]);%0A};%0Aprototype2.toString = function toString2(encoder2) {%0A  const _encode = encoder2 ? function(value) {%0A    return encoder2.call(this, value, encode);%0A  } : encode;%0A  return this._pairs.map(function each(pair) {%0A    return _encode(pair[0]) + "=" + _encode(pair[1]);%0A  }, "").join("&");%0A};%0Avar AxiosURLSearchParams_default = AxiosURLSearchParams;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/buildURL.js%0Afunction encode2(val) {%0A  return encodeURIComponent(val).replace(/%253A/gi, ":").replace(/%2524/g, "$").replace(/%252C/gi, ",").replace(/%2520/g, "+").replace(/%255B/gi, "[").replace(/%255D/gi, "]");%0A}%0Afunction buildURL(url, params, options) {%0A  if (!params) {%0A    return url;%0A  }%0A  const _encode = options && options.encode || encode2;%0A  const serializeFn = options && options.serialize;%0A  let serializedParams;%0A  if (serializeFn) {%0A    serializedParams = serializeFn(params, options);%0A  } else {%0A    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);%0A  }%0A  if (serializedParams) {%0A    const hashmarkIndex = url.indexOf("%23");%0A    if (hashmarkIndex !== -1) {%0A      url = url.slice(0, hashmarkIndex);%0A    }%0A    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;%0A  }%0A  return url;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/InterceptorManager.js%0Avar InterceptorManager = class {%0A  constructor() {%0A    this.handlers = [];%0A  }%0A  /**%0A   * Add a new interceptor to the stack%0A   *%0A   * @param {Function} fulfilled The function to handle `then` for a `Promise`%0A   * @param {Function} rejected The function to handle `reject` for a `Promise`%0A   *%0A   * @return {Number} An ID used to remove interceptor later%0A   */%0A  use(fulfilled, rejected, options) {%0A    this.handlers.push({%0A      fulfilled,%0A      rejected,%0A      synchronous: options ? options.synchronous : false,%0A      runWhen: options ? options.runWhen : null%0A    });%0A    return this.handlers.length - 1;%0A  }%0A  /**%0A   * Remove an interceptor from the stack%0A   *%0A   * @param {Number} id The ID that was returned by `use`%0A   *%0A   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise%0A   */%0A  eject(id) {%0A    if (this.handlers[id]) {%0A      this.handlers[id] = null;%0A    }%0A  }%0A  /**%0A   * Clear all interceptors from the stack%0A   *%0A   * @returns {void}%0A   */%0A  clear() {%0A    if (this.handlers) {%0A      this.handlers = [];%0A    }%0A  }%0A  /**%0A   * Iterate over all the registered interceptors%0A   *%0A   * This method is particularly useful for skipping over any%0A   * interceptors that may have become `null` calling `eject`.%0A   *%0A   * @param {Function} fn The function to call for each interceptor%0A   *%0A   * @returns {void}%0A   */%0A  forEach(fn) {%0A    utils_default.forEach(this.handlers, function forEachHandler(h) {%0A      if (h !== null) {%0A        fn(h);%0A      }%0A    });%0A  }%0A};%0Avar InterceptorManager_default = InterceptorManager;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/defaults/transitional.js%0Avar transitional_default = {%0A  silentJSONParsing: true,%0A  forcedJSONParsing: true,%0A  clarifyTimeoutError: false%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js%0Avar URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/FormData.js%0Avar FormData_default = typeof FormData !== "undefined" ? FormData : null;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/classes/Blob.js%0Avar Blob_default = typeof Blob !== "undefined" ? Blob : null;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/browser/index.js%0Avar browser_default = {%0A  isBrowser: true,%0A  classes: {%0A    URLSearchParams: URLSearchParams_default,%0A    FormData: FormData_default,%0A    Blob: Blob_default%0A  },%0A  protocols: ["http", "https", "file", "blob", "url", "data"]%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/common/utils.js%0Avar utils_exports = {};%0A__export(utils_exports, {%0A  hasBrowserEnv: () => hasBrowserEnv,%0A  hasStandardBrowserEnv: () => hasStandardBrowserEnv,%0A  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,%0A  origin: () => origin%0A});%0Avar hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";%0Avar hasStandardBrowserEnv = ((product) => {%0A  return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;%0A})(typeof navigator !== "undefined" && navigator.product);%0Avar hasStandardBrowserWebWorkerEnv = (() => {%0A  return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef%0A  self instanceof WorkerGlobalScope && typeof self.importScripts === "function";%0A})();%0Avar origin = hasBrowserEnv && window.location.href || "http://localhost";%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/platform/index.js%0Avar platform_default = {%0A  ...utils_exports,%0A  ...browser_default%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/toURLEncodedForm.js%0Afunction toURLEncodedForm(data, options) {%0A  return toFormData_default(data, new platform_default.classes.URLSearchParams(), Object.assign({%0A    visitor: function(value, key, path, helpers) {%0A      if (platform_default.isNode && utils_default.isBuffer(value)) {%0A        this.append(key, value.toString("base64"));%0A        return false;%0A      }%0A      return helpers.defaultVisitor.apply(this, arguments);%0A    }%0A  }, options));%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/formDataToJSON.js%0Afunction parsePropPath(name) {%0A  return utils_default.matchAll(/\\w+|\\[(\\w*)]/g, name).map((match) => {%0A    return match[0] === "[]" ? "" : match[1] || match[0];%0A  });%0A}%0Afunction arrayToObject(arr) {%0A  const obj = {};%0A  const keys = Object.keys(arr);%0A  let i;%0A  const len = keys.length;%0A  let key;%0A  for (i = 0; i < len; i++) {%0A    key = keys[i];%0A    obj[key] = arr[key];%0A  }%0A  return obj;%0A}%0Afunction formDataToJSON(formData) {%0A  function buildPath(path, value, target, index) {%0A    let name = path[index++];%0A    if (name === "__proto__") return true;%0A    const isNumericKey = Number.isFinite(+name);%0A    const isLast = index >= path.length;%0A    name = !name && utils_default.isArray(target) ? target.length : name;%0A    if (isLast) {%0A      if (utils_default.hasOwnProp(target, name)) {%0A        target[name] = [target[name], value];%0A      } else {%0A        target[name] = value;%0A      }%0A      return !isNumericKey;%0A    }%0A    if (!target[name] || !utils_default.isObject(target[name])) {%0A      target[name] = [];%0A    }%0A    const result = buildPath(path, value, target[name], index);%0A    if (result && utils_default.isArray(target[name])) {%0A      target[name] = arrayToObject(target[name]);%0A    }%0A    return !isNumericKey;%0A  }%0A  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {%0A    const obj = {};%0A    utils_default.forEachEntry(formData, (name, value) => {%0A      buildPath(parsePropPath(name), value, obj, 0);%0A    });%0A    return obj;%0A  }%0A  return null;%0A}%0Avar formDataToJSON_default = formDataToJSON;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/defaults/index.js%0Afunction stringifySafely(rawValue, parser, encoder2) {%0A  if (utils_default.isString(rawValue)) {%0A    try {%0A      (parser || JSON.parse)(rawValue);%0A      return utils_default.trim(rawValue);%0A    } catch (e) {%0A      if (e.name !== "SyntaxError") {%0A        throw e;%0A      }%0A    }%0A  }%0A  return (encoder2 || JSON.stringify)(rawValue);%0A}%0Avar defaults = {%0A  transitional: transitional_default,%0A  adapter: ["xhr", "http", "fetch"],%0A  transformRequest: [function transformRequest(data, headers) {%0A    const contentType = headers.getContentType() || "";%0A    const hasJSONContentType = contentType.indexOf("application/json") > -1;%0A    const isObjectPayload = utils_default.isObject(data);%0A    if (isObjectPayload && utils_default.isHTMLForm(data)) {%0A      data = new FormData(data);%0A    }%0A    const isFormData2 = utils_default.isFormData(data);%0A    if (isFormData2) {%0A      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;%0A    }%0A    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {%0A      return data;%0A    }%0A    if (utils_default.isArrayBufferView(data)) {%0A      return data.buffer;%0A    }%0A    if (utils_default.isURLSearchParams(data)) {%0A      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);%0A      return data.toString();%0A    }%0A    let isFileList2;%0A    if (isObjectPayload) {%0A      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {%0A        return toURLEncodedForm(data, this.formSerializer).toString();%0A      }%0A      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {%0A        const _FormData = this.env && this.env.FormData;%0A        return toFormData_default(%0A          isFileList2 ? { "files[]": data } : data,%0A          _FormData && new _FormData(),%0A          this.formSerializer%0A        );%0A      }%0A    }%0A    if (isObjectPayload || hasJSONContentType) {%0A      headers.setContentType("application/json", false);%0A      return stringifySafely(data);%0A    }%0A    return data;%0A  }],%0A  transformResponse: [function transformResponse(data) {%0A    const transitional2 = this.transitional || defaults.transitional;%0A    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;%0A    const JSONRequested = this.responseType === "json";%0A    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {%0A      return data;%0A    }%0A    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {%0A      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;%0A      const strictJSONParsing = !silentJSONParsing && JSONRequested;%0A      try {%0A        return JSON.parse(data);%0A      } catch (e) {%0A        if (strictJSONParsing) {%0A          if (e.name === "SyntaxError") {%0A            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);%0A          }%0A          throw e;%0A        }%0A      }%0A    }%0A    return data;%0A  }],%0A  /**%0A   * A timeout in milliseconds to abort a request. If set to 0 (default) a%0A   * timeout is not created.%0A   */%0A  timeout: 0,%0A  xsrfCookieName: "XSRF-TOKEN",%0A  xsrfHeaderName: "X-XSRF-TOKEN",%0A  maxContentLength: -1,%0A  maxBodyLength: -1,%0A  env: {%0A    FormData: platform_default.classes.FormData,%0A    Blob: platform_default.classes.Blob%0A  },%0A  validateStatus: function validateStatus(status) {%0A    return status >= 200 && status < 300;%0A  },%0A  headers: {%0A    common: {%0A      "Accept": "application/json, text/plain, */*",%0A      "Content-Type": void 0%0A    }%0A  }%0A};%0Autils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {%0A  defaults.headers[method] = {};%0A});%0Avar defaults_default = defaults;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/parseHeaders.js%0Avar ignoreDuplicateOf = utils_default.toObjectSet([%0A  "age",%0A  "authorization",%0A  "content-length",%0A  "content-type",%0A  "etag",%0A  "expires",%0A  "from",%0A  "host",%0A  "if-modified-since",%0A  "if-unmodified-since",%0A  "last-modified",%0A  "location",%0A  "max-forwards",%0A  "proxy-authorization",%0A  "referer",%0A  "retry-after",%0A  "user-agent"%0A]);%0Avar parseHeaders_default = (rawHeaders) => {%0A  const parsed = {};%0A  let key;%0A  let val;%0A  let i;%0A  rawHeaders && rawHeaders.split("\\n").forEach(function parser(line) {%0A    i = line.indexOf(":");%0A    key = line.substring(0, i).trim().toLowerCase();%0A    val = line.substring(i + 1).trim();%0A    if (!key || parsed[key] && ignoreDuplicateOf[key]) {%0A      return;%0A    }%0A    if (key === "set-cookie") {%0A      if (parsed[key]) {%0A        parsed[key].push(val);%0A      } else {%0A        parsed[key] = [val];%0A      }%0A    } else {%0A      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;%0A    }%0A  });%0A  return parsed;%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/AxiosHeaders.js%0Avar $internals = Symbol("internals");%0Afunction normalizeHeader(header) {%0A  return header && String(header).trim().toLowerCase();%0A}%0Afunction normalizeValue(value) {%0A  if (value === false || value == null) {%0A    return value;%0A  }%0A  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);%0A}%0Afunction parseTokens(str) {%0A  const tokens = /* @__PURE__ */ Object.create(null);%0A  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;%0A  let match;%0A  while (match = tokensRE.exec(str)) {%0A    tokens[match[1]] = match[2];%0A  }%0A  return tokens;%0A}%0Avar isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!%23$%&\'*+.]+$/.test(str.trim());%0Afunction matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {%0A  if (utils_default.isFunction(filter2)) {%0A    return filter2.call(this, value, header);%0A  }%0A  if (isHeaderNameFilter) {%0A    value = header;%0A  }%0A  if (!utils_default.isString(value)) return;%0A  if (utils_default.isString(filter2)) {%0A    return value.indexOf(filter2) !== -1;%0A  }%0A  if (utils_default.isRegExp(filter2)) {%0A    return filter2.test(value);%0A  }%0A}%0Afunction formatHeader(header) {%0A  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {%0A    return char.toUpperCase() + str;%0A  });%0A}%0Afunction buildAccessors(obj, header) {%0A  const accessorName = utils_default.toCamelCase(" " + header);%0A  ["get", "set", "has"].forEach((methodName) => {%0A    Object.defineProperty(obj, methodName + accessorName, {%0A      value: function(arg1, arg2, arg3) {%0A        return this[methodName].call(this, header, arg1, arg2, arg3);%0A      },%0A      configurable: true%0A    });%0A  });%0A}%0Avar AxiosHeaders = class {%0A  constructor(headers) {%0A    headers && this.set(headers);%0A  }%0A  set(header, valueOrRewrite, rewrite) {%0A    const self2 = this;%0A    function setHeader(_value, _header, _rewrite) {%0A      const lHeader = normalizeHeader(_header);%0A      if (!lHeader) {%0A        throw new Error("header name must be a non-empty string");%0A      }%0A      const key = utils_default.findKey(self2, lHeader);%0A      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {%0A        self2[key || _header] = normalizeValue(_value);%0A      }%0A    }%0A    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));%0A    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {%0A      setHeaders(header, valueOrRewrite);%0A    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {%0A      setHeaders(parseHeaders_default(header), valueOrRewrite);%0A    } else if (utils_default.isHeaders(header)) {%0A      for (const [key, value] of header.entries()) {%0A        setHeader(value, key, rewrite);%0A      }%0A    } else {%0A      header != null && setHeader(valueOrRewrite, header, rewrite);%0A    }%0A    return this;%0A  }%0A  get(header, parser) {%0A    header = normalizeHeader(header);%0A    if (header) {%0A      const key = utils_default.findKey(this, header);%0A      if (key) {%0A        const value = this[key];%0A        if (!parser) {%0A          return value;%0A        }%0A        if (parser === true) {%0A          return parseTokens(value);%0A        }%0A        if (utils_default.isFunction(parser)) {%0A          return parser.call(this, value, key);%0A        }%0A        if (utils_default.isRegExp(parser)) {%0A          return parser.exec(value);%0A        }%0A        throw new TypeError("parser must be boolean|regexp|function");%0A      }%0A    }%0A  }%0A  has(header, matcher) {%0A    header = normalizeHeader(header);%0A    if (header) {%0A      const key = utils_default.findKey(this, header);%0A      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));%0A    }%0A    return false;%0A  }%0A  delete(header, matcher) {%0A    const self2 = this;%0A    let deleted = false;%0A    function deleteHeader(_header) {%0A      _header = normalizeHeader(_header);%0A      if (_header) {%0A        const key = utils_default.findKey(self2, _header);%0A        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {%0A          delete self2[key];%0A          deleted = true;%0A        }%0A      }%0A    }%0A    if (utils_default.isArray(header)) {%0A      header.forEach(deleteHeader);%0A    } else {%0A      deleteHeader(header);%0A    }%0A    return deleted;%0A  }%0A  clear(matcher) {%0A    const keys = Object.keys(this);%0A    let i = keys.length;%0A    let deleted = false;%0A    while (i--) {%0A      const key = keys[i];%0A      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {%0A        delete this[key];%0A        deleted = true;%0A      }%0A    }%0A    return deleted;%0A  }%0A  normalize(format) {%0A    const self2 = this;%0A    const headers = {};%0A    utils_default.forEach(this, (value, header) => {%0A      const key = utils_default.findKey(headers, header);%0A      if (key) {%0A        self2[key] = normalizeValue(value);%0A        delete self2[header];%0A        return;%0A      }%0A      const normalized = format ? formatHeader(header) : String(header).trim();%0A      if (normalized !== header) {%0A        delete self2[header];%0A      }%0A      self2[normalized] = normalizeValue(value);%0A      headers[normalized] = true;%0A    });%0A    return this;%0A  }%0A  concat(...targets) {%0A    return this.constructor.concat(this, ...targets);%0A  }%0A  toJSON(asStrings) {%0A    const obj = /* @__PURE__ */ Object.create(null);%0A    utils_default.forEach(this, (value, header) => {%0A      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);%0A    });%0A    return obj;%0A  }%0A  [Symbol.iterator]() {%0A    return Object.entries(this.toJSON())[Symbol.iterator]();%0A  }%0A  toString() {%0A    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\\n");%0A  }%0A  get [Symbol.toStringTag]() {%0A    return "AxiosHeaders";%0A  }%0A  static from(thing) {%0A    return thing instanceof this ? thing : new this(thing);%0A  }%0A  static concat(first, ...targets) {%0A    const computed = new this(first);%0A    targets.forEach((target) => computed.set(target));%0A    return computed;%0A  }%0A  static accessor(header) {%0A    const internals = this[$internals] = this[$internals] = {%0A      accessors: {}%0A    };%0A    const accessors = internals.accessors;%0A    const prototype3 = this.prototype;%0A    function defineAccessor(_header) {%0A      const lHeader = normalizeHeader(_header);%0A      if (!accessors[lHeader]) {%0A        buildAccessors(prototype3, _header);%0A        accessors[lHeader] = true;%0A      }%0A    }%0A    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);%0A    return this;%0A  }%0A};%0AAxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);%0Autils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {%0A  let mapped = key[0].toUpperCase() + key.slice(1);%0A  return {%0A    get: () => value,%0A    set(headerValue) {%0A      this[mapped] = headerValue;%0A    }%0A  };%0A});%0Autils_default.freezeMethods(AxiosHeaders);%0Avar AxiosHeaders_default = AxiosHeaders;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/transformData.js%0Afunction transformData(fns, response) {%0A  const config = this || defaults_default;%0A  const context = response || config;%0A  const headers = AxiosHeaders_default.from(context.headers);%0A  let data = context.data;%0A  utils_default.forEach(fns, function transform(fn) {%0A    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);%0A  });%0A  headers.normalize();%0A  return data;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/isCancel.js%0Afunction isCancel(value) {%0A  return !!(value && value.__CANCEL__);%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/CanceledError.js%0Afunction CanceledError(message, config, request) {%0A  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);%0A  this.name = "CanceledError";%0A}%0Autils_default.inherits(CanceledError, AxiosError_default, {%0A  __CANCEL__: true%0A});%0Avar CanceledError_default = CanceledError;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/settle.js%0Afunction settle(resolve, reject, response) {%0A  const validateStatus2 = response.config.validateStatus;%0A  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {%0A    resolve(response);%0A  } else {%0A    reject(new AxiosError_default(%0A      "Request failed with status code " + response.status,%0A      [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],%0A      response.config,%0A      response.request,%0A      response%0A    ));%0A  }%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/parseProtocol.js%0Afunction parseProtocol(url) {%0A  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);%0A  return match && match[1] || "";%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/speedometer.js%0Afunction speedometer(samplesCount, min) {%0A  samplesCount = samplesCount || 10;%0A  const bytes = new Array(samplesCount);%0A  const timestamps = new Array(samplesCount);%0A  let head = 0;%0A  let tail = 0;%0A  let firstSampleTS;%0A  min = min !== void 0 ? min : 1e3;%0A  return function push(chunkLength) {%0A    const now = Date.now();%0A    const startedAt = timestamps[tail];%0A    if (!firstSampleTS) {%0A      firstSampleTS = now;%0A    }%0A    bytes[head] = chunkLength;%0A    timestamps[head] = now;%0A    let i = tail;%0A    let bytesCount = 0;%0A    while (i !== head) {%0A      bytesCount += bytes[i++];%0A      i = i % samplesCount;%0A    }%0A    head = (head + 1) % samplesCount;%0A    if (head === tail) {%0A      tail = (tail + 1) % samplesCount;%0A    }%0A    if (now - firstSampleTS < min) {%0A      return;%0A    }%0A    const passed = startedAt && now - startedAt;%0A    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;%0A  };%0A}%0Avar speedometer_default = speedometer;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/throttle.js%0Afunction throttle(fn, freq) {%0A  let timestamp = 0;%0A  let threshold = 1e3 / freq;%0A  let lastArgs;%0A  let timer;%0A  const invoke = (args, now = Date.now()) => {%0A    timestamp = now;%0A    lastArgs = null;%0A    if (timer) {%0A      clearTimeout(timer);%0A      timer = null;%0A    }%0A    fn.apply(null, args);%0A  };%0A  const throttled = (...args) => {%0A    const now = Date.now();%0A    const passed = now - timestamp;%0A    if (passed >= threshold) {%0A      invoke(args, now);%0A    } else {%0A      lastArgs = args;%0A      if (!timer) {%0A        timer = setTimeout(() => {%0A          timer = null;%0A          invoke(lastArgs);%0A        }, threshold - passed);%0A      }%0A    }%0A  };%0A  const flush = () => lastArgs && invoke(lastArgs);%0A  return [throttled, flush];%0A}%0Avar throttle_default = throttle;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/progressEventReducer.js%0Avar progressEventReducer = (listener, isDownloadStream, freq = 3) => {%0A  let bytesNotified = 0;%0A  const _speedometer = speedometer_default(50, 250);%0A  return throttle_default((e) => {%0A    const loaded = e.loaded;%0A    const total = e.lengthComputable ? e.total : void 0;%0A    const progressBytes = loaded - bytesNotified;%0A    const rate = _speedometer(progressBytes);%0A    const inRange = loaded <= total;%0A    bytesNotified = loaded;%0A    const data = {%0A      loaded,%0A      total,%0A      progress: total ? loaded / total : void 0,%0A      bytes: progressBytes,%0A      rate: rate ? rate : void 0,%0A      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,%0A      event: e,%0A      lengthComputable: total != null,%0A      [isDownloadStream ? "download" : "upload"]: true%0A    };%0A    listener(data);%0A  }, freq);%0A};%0Avar progressEventDecorator = (total, throttled) => {%0A  const lengthComputable = total != null;%0A  return [(loaded) => throttled[0]({%0A    lengthComputable,%0A    total,%0A    loaded%0A  }), throttled[1]];%0A};%0Avar asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isURLSameOrigin.js%0Avar isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (%0A  // Standard browser envs have full support of the APIs needed to test%0A  // whether the request URL is of the same origin as current location.%0A  function standardBrowserEnv() {%0A    const msie = /(msie|trident)/i.test(navigator.userAgent);%0A    const urlParsingNode = document.createElement("a");%0A    let originURL;%0A    function resolveURL(url) {%0A      let href = url;%0A      if (msie) {%0A        urlParsingNode.setAttribute("href", href);%0A        href = urlParsingNode.href;%0A      }%0A      urlParsingNode.setAttribute("href", href);%0A      return {%0A        href: urlParsingNode.href,%0A        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",%0A        host: urlParsingNode.host,%0A        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, "") : "",%0A        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^%23/, "") : "",%0A        hostname: urlParsingNode.hostname,%0A        port: urlParsingNode.port,%0A        pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname%0A      };%0A    }%0A    originURL = resolveURL(window.location.href);%0A    return function isURLSameOrigin(requestURL) {%0A      const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;%0A      return parsed.protocol === originURL.protocol && parsed.host === originURL.host;%0A    };%0A  }()%0A) : (%0A  // Non standard browser envs (web workers, react-native) lack needed support.%0A  /* @__PURE__ */ function nonStandardBrowserEnv() {%0A    return function isURLSameOrigin() {%0A      return true;%0A    };%0A  }()%0A);%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/cookies.js%0Avar cookies_default = platform_default.hasStandardBrowserEnv ? (%0A  // Standard browser envs support document.cookie%0A  {%0A    write(name, value, expires, path, domain, secure) {%0A      const cookie = [name + "=" + encodeURIComponent(value)];%0A      utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());%0A      utils_default.isString(path) && cookie.push("path=" + path);%0A      utils_default.isString(domain) && cookie.push("domain=" + domain);%0A      secure === true && cookie.push("secure");%0A      document.cookie = cookie.join("; ");%0A    },%0A    read(name) {%0A      const match = document.cookie.match(new RegExp("(^|;\\\\s*)(" + name + ")=([^;]*)"));%0A      return match ? decodeURIComponent(match[3]) : null;%0A    },%0A    remove(name) {%0A      this.write(name, "", Date.now() - 864e5);%0A    }%0A  }%0A) : (%0A  // Non-standard browser env (web workers, react-native) lack needed support.%0A  {%0A    write() {%0A    },%0A    read() {%0A      return null;%0A    },%0A    remove() {%0A    }%0A  }%0A);%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isAbsoluteURL.js%0Afunction isAbsoluteURL(url) {%0A  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/combineURLs.js%0Afunction combineURLs(baseURL, relativeURL) {%0A  return relativeURL ? baseURL.replace(/\\/?\\/$/, "") + "/" + relativeURL.replace(/^\\/+/, "") : baseURL;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/buildFullPath.js%0Afunction buildFullPath(baseURL, requestedURL) {%0A  if (baseURL && !isAbsoluteURL(requestedURL)) {%0A    return combineURLs(baseURL, requestedURL);%0A  }%0A  return requestedURL;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/mergeConfig.js%0Avar headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;%0Afunction mergeConfig(config1, config2) {%0A  config2 = config2 || {};%0A  const config = {};%0A  function getMergedValue(target, source, caseless) {%0A    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {%0A      return utils_default.merge.call({ caseless }, target, source);%0A    } else if (utils_default.isPlainObject(source)) {%0A      return utils_default.merge({}, source);%0A    } else if (utils_default.isArray(source)) {%0A      return source.slice();%0A    }%0A    return source;%0A  }%0A  function mergeDeepProperties(a, b, caseless) {%0A    if (!utils_default.isUndefined(b)) {%0A      return getMergedValue(a, b, caseless);%0A    } else if (!utils_default.isUndefined(a)) {%0A      return getMergedValue(void 0, a, caseless);%0A    }%0A  }%0A  function valueFromConfig2(a, b) {%0A    if (!utils_default.isUndefined(b)) {%0A      return getMergedValue(void 0, b);%0A    }%0A  }%0A  function defaultToConfig2(a, b) {%0A    if (!utils_default.isUndefined(b)) {%0A      return getMergedValue(void 0, b);%0A    } else if (!utils_default.isUndefined(a)) {%0A      return getMergedValue(void 0, a);%0A    }%0A  }%0A  function mergeDirectKeys(a, b, prop) {%0A    if (prop in config2) {%0A      return getMergedValue(a, b);%0A    } else if (prop in config1) {%0A      return getMergedValue(void 0, a);%0A    }%0A  }%0A  const mergeMap = {%0A    url: valueFromConfig2,%0A    method: valueFromConfig2,%0A    data: valueFromConfig2,%0A    baseURL: defaultToConfig2,%0A    transformRequest: defaultToConfig2,%0A    transformResponse: defaultToConfig2,%0A    paramsSerializer: defaultToConfig2,%0A    timeout: defaultToConfig2,%0A    timeoutMessage: defaultToConfig2,%0A    withCredentials: defaultToConfig2,%0A    withXSRFToken: defaultToConfig2,%0A    adapter: defaultToConfig2,%0A    responseType: defaultToConfig2,%0A    xsrfCookieName: defaultToConfig2,%0A    xsrfHeaderName: defaultToConfig2,%0A    onUploadProgress: defaultToConfig2,%0A    onDownloadProgress: defaultToConfig2,%0A    decompress: defaultToConfig2,%0A    maxContentLength: defaultToConfig2,%0A    maxBodyLength: defaultToConfig2,%0A    beforeRedirect: defaultToConfig2,%0A    transport: defaultToConfig2,%0A    httpAgent: defaultToConfig2,%0A    httpsAgent: defaultToConfig2,%0A    cancelToken: defaultToConfig2,%0A    socketPath: defaultToConfig2,%0A    responseEncoding: defaultToConfig2,%0A    validateStatus: mergeDirectKeys,%0A    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)%0A  };%0A  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {%0A    const merge2 = mergeMap[prop] || mergeDeepProperties;%0A    const configValue = merge2(config1[prop], config2[prop], prop);%0A    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);%0A  });%0A  return config;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/resolveConfig.js%0Avar resolveConfig_default = (config) => {%0A  const newConfig = mergeConfig({}, config);%0A  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;%0A  newConfig.headers = headers = AxiosHeaders_default.from(headers);%0A  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);%0A  if (auth) {%0A    headers.set(%0A      "Authorization",%0A      "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))%0A    );%0A  }%0A  let contentType;%0A  if (utils_default.isFormData(data)) {%0A    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {%0A      headers.setContentType(void 0);%0A    } else if ((contentType = headers.getContentType()) !== false) {%0A      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];%0A      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));%0A    }%0A  }%0A  if (platform_default.hasStandardBrowserEnv) {%0A    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));%0A    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {%0A      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);%0A      if (xsrfValue) {%0A        headers.set(xsrfHeaderName, xsrfValue);%0A      }%0A    }%0A  }%0A  return newConfig;%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/xhr.js%0Avar isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";%0Avar xhr_default = isXHRAdapterSupported && function(config) {%0A  return new Promise(function dispatchXhrRequest(resolve, reject) {%0A    const _config = resolveConfig_default(config);%0A    let requestData = _config.data;%0A    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();%0A    let { responseType, onUploadProgress, onDownloadProgress } = _config;%0A    let onCanceled;%0A    let uploadThrottled, downloadThrottled;%0A    let flushUpload, flushDownload;%0A    function done() {%0A      flushUpload && flushUpload();%0A      flushDownload && flushDownload();%0A      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);%0A      _config.signal && _config.signal.removeEventListener("abort", onCanceled);%0A    }%0A    let request = new XMLHttpRequest();%0A    request.open(_config.method.toUpperCase(), _config.url, true);%0A    request.timeout = _config.timeout;%0A    function onloadend() {%0A      if (!request) {%0A        return;%0A      }%0A      const responseHeaders = AxiosHeaders_default.from(%0A        "getAllResponseHeaders" in request && request.getAllResponseHeaders()%0A      );%0A      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;%0A      const response = {%0A        data: responseData,%0A        status: request.status,%0A        statusText: request.statusText,%0A        headers: responseHeaders,%0A        config,%0A        request%0A      };%0A      settle(function _resolve(value) {%0A        resolve(value);%0A        done();%0A      }, function _reject(err) {%0A        reject(err);%0A        done();%0A      }, response);%0A      request = null;%0A    }%0A    if ("onloadend" in request) {%0A      request.onloadend = onloadend;%0A    } else {%0A      request.onreadystatechange = function handleLoad() {%0A        if (!request || request.readyState !== 4) {%0A          return;%0A        }%0A        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {%0A          return;%0A        }%0A        setTimeout(onloadend);%0A      };%0A    }%0A    request.onabort = function handleAbort() {%0A      if (!request) {%0A        return;%0A      }%0A      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));%0A      request = null;%0A    };%0A    request.onerror = function handleError() {%0A      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));%0A      request = null;%0A    };%0A    request.ontimeout = function handleTimeout() {%0A      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";%0A      const transitional2 = _config.transitional || transitional_default;%0A      if (_config.timeoutErrorMessage) {%0A        timeoutErrorMessage = _config.timeoutErrorMessage;%0A      }%0A      reject(new AxiosError_default(%0A        timeoutErrorMessage,%0A        transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,%0A        config,%0A        request%0A      ));%0A      request = null;%0A    };%0A    requestData === void 0 && requestHeaders.setContentType(null);%0A    if ("setRequestHeader" in request) {%0A      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {%0A        request.setRequestHeader(key, val);%0A      });%0A    }%0A    if (!utils_default.isUndefined(_config.withCredentials)) {%0A      request.withCredentials = !!_config.withCredentials;%0A    }%0A    if (responseType && responseType !== "json") {%0A      request.responseType = _config.responseType;%0A    }%0A    if (onDownloadProgress) {%0A      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);%0A      request.addEventListener("progress", downloadThrottled);%0A    }%0A    if (onUploadProgress && request.upload) {%0A      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);%0A      request.upload.addEventListener("progress", uploadThrottled);%0A      request.upload.addEventListener("loadend", flushUpload);%0A    }%0A    if (_config.cancelToken || _config.signal) {%0A      onCanceled = (cancel) => {%0A        if (!request) {%0A          return;%0A        }%0A        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);%0A        request.abort();%0A        request = null;%0A      };%0A      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);%0A      if (_config.signal) {%0A        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);%0A      }%0A    }%0A    const protocol = parseProtocol(_config.url);%0A    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {%0A      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));%0A      return;%0A    }%0A    request.send(requestData || null);%0A  });%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/composeSignals.js%0Avar composeSignals = (signals, timeout) => {%0A  let controller = new AbortController();%0A  let aborted;%0A  const onabort = function(cancel) {%0A    if (!aborted) {%0A      aborted = true;%0A      unsubscribe();%0A      const err = cancel instanceof Error ? cancel : this.reason;%0A      controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));%0A    }%0A  };%0A  let timer = timeout && setTimeout(() => {%0A    onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));%0A  }, timeout);%0A  const unsubscribe = () => {%0A    if (signals) {%0A      timer && clearTimeout(timer);%0A      timer = null;%0A      signals.forEach((signal2) => {%0A        signal2 && (signal2.removeEventListener ? signal2.removeEventListener("abort", onabort) : signal2.unsubscribe(onabort));%0A      });%0A      signals = null;%0A    }%0A  };%0A  signals.forEach((signal2) => signal2 && signal2.addEventListener && signal2.addEventListener("abort", onabort));%0A  const { signal } = controller;%0A  signal.unsubscribe = unsubscribe;%0A  return [signal, () => {%0A    timer && clearTimeout(timer);%0A    timer = null;%0A  }];%0A};%0Avar composeSignals_default = composeSignals;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/trackStream.js%0Avar streamChunk = function* (chunk, chunkSize) {%0A  let len = chunk.byteLength;%0A  if (!chunkSize || len < chunkSize) {%0A    yield chunk;%0A    return;%0A  }%0A  let pos = 0;%0A  let end;%0A  while (pos < len) {%0A    end = pos + chunkSize;%0A    yield chunk.slice(pos, end);%0A    pos = end;%0A  }%0A};%0Avar readBytes = async function* (iterable, chunkSize, encode3) {%0A  for await (const chunk of iterable) {%0A    yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode3(String(chunk)), chunkSize);%0A  }%0A};%0Avar trackStream = (stream, chunkSize, onProgress, onFinish, encode3) => {%0A  const iterator = readBytes(stream, chunkSize, encode3);%0A  let bytes = 0;%0A  let done;%0A  let _onFinish = (e) => {%0A    if (!done) {%0A      done = true;%0A      onFinish && onFinish(e);%0A    }%0A  };%0A  return new ReadableStream({%0A    async pull(controller) {%0A      try {%0A        const { done: done2, value } = await iterator.next();%0A        if (done2) {%0A          _onFinish();%0A          controller.close();%0A          return;%0A        }%0A        let len = value.byteLength;%0A        if (onProgress) {%0A          let loadedBytes = bytes += len;%0A          onProgress(loadedBytes);%0A        }%0A        controller.enqueue(new Uint8Array(value));%0A      } catch (err) {%0A        _onFinish(err);%0A        throw err;%0A      }%0A    },%0A    cancel(reason) {%0A      _onFinish(reason);%0A      return iterator.return();%0A    }%0A  }, {%0A    highWaterMark: 2%0A  });%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/fetch.js%0Avar isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";%0Avar isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";%0Avar encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder2) => (str) => encoder2.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));%0Avar test = (fn, ...args) => {%0A  try {%0A    return !!fn(...args);%0A  } catch (e) {%0A    return false;%0A  }%0A};%0Avar supportsRequestStream = isReadableStreamSupported && test(() => {%0A  let duplexAccessed = false;%0A  const hasContentType = new Request(platform_default.origin, {%0A    body: new ReadableStream(),%0A    method: "POST",%0A    get duplex() {%0A      duplexAccessed = true;%0A      return "half";%0A    }%0A  }).headers.has("Content-Type");%0A  return duplexAccessed && !hasContentType;%0A});%0Avar DEFAULT_CHUNK_SIZE = 64 * 1024;%0Avar supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));%0Avar resolvers = {%0A  stream: supportsResponseStream && ((res) => res.body)%0A};%0AisFetchSupported && ((res) => {%0A  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {%0A    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {%0A      throw new AxiosError_default(`Response type \'${type}\' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);%0A    });%0A  });%0A})(new Response());%0Avar getBodyLength = async (body) => {%0A  if (body == null) {%0A    return 0;%0A  }%0A  if (utils_default.isBlob(body)) {%0A    return body.size;%0A  }%0A  if (utils_default.isSpecCompliantForm(body)) {%0A    return (await new Request(body).arrayBuffer()).byteLength;%0A  }%0A  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {%0A    return body.byteLength;%0A  }%0A  if (utils_default.isURLSearchParams(body)) {%0A    body = body + "";%0A  }%0A  if (utils_default.isString(body)) {%0A    return (await encodeText(body)).byteLength;%0A  }%0A};%0Avar resolveBodyLength = async (headers, body) => {%0A  const length = utils_default.toFiniteNumber(headers.getContentLength());%0A  return length == null ? getBodyLength(body) : length;%0A};%0Avar fetch_default = isFetchSupported && (async (config) => {%0A  let {%0A    url,%0A    method,%0A    data,%0A    signal,%0A    cancelToken,%0A    timeout,%0A    onDownloadProgress,%0A    onUploadProgress,%0A    responseType,%0A    headers,%0A    withCredentials = "same-origin",%0A    fetchOptions%0A  } = resolveConfig_default(config);%0A  responseType = responseType ? (responseType + "").toLowerCase() : "text";%0A  let [composedSignal, stopTimeout] = signal || cancelToken || timeout ? composeSignals_default([signal, cancelToken], timeout) : [];%0A  let finished, request;%0A  const onFinish = () => {%0A    !finished && setTimeout(() => {%0A      composedSignal && composedSignal.unsubscribe();%0A    });%0A    finished = true;%0A  };%0A  let requestContentLength;%0A  try {%0A    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {%0A      let _request = new Request(url, {%0A        method: "POST",%0A        body: data,%0A        duplex: "half"%0A      });%0A      let contentTypeHeader;%0A      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {%0A        headers.setContentType(contentTypeHeader);%0A      }%0A      if (_request.body) {%0A        const [onProgress, flush] = progressEventDecorator(%0A          requestContentLength,%0A          progressEventReducer(asyncDecorator(onUploadProgress))%0A        );%0A        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);%0A      }%0A    }%0A    if (!utils_default.isString(withCredentials)) {%0A      withCredentials = withCredentials ? "include" : "omit";%0A    }%0A    request = new Request(url, {%0A      ...fetchOptions,%0A      signal: composedSignal,%0A      method: method.toUpperCase(),%0A      headers: headers.normalize().toJSON(),%0A      body: data,%0A      duplex: "half",%0A      credentials: withCredentials%0A    });%0A    let response = await fetch(request);%0A    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");%0A    if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {%0A      const options = {};%0A      ["status", "statusText", "headers"].forEach((prop) => {%0A        options[prop] = response[prop];%0A      });%0A      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));%0A      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(%0A        responseContentLength,%0A        progressEventReducer(asyncDecorator(onDownloadProgress), true)%0A      ) || [];%0A      response = new Response(%0A        trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {%0A          flush && flush();%0A          isStreamResponse && onFinish();%0A        }, encodeText),%0A        options%0A      );%0A    }%0A    responseType = responseType || "text";%0A    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);%0A    !isStreamResponse && onFinish();%0A    stopTimeout && stopTimeout();%0A    return await new Promise((resolve, reject) => {%0A      settle(resolve, reject, {%0A        data: responseData,%0A        headers: AxiosHeaders_default.from(response.headers),%0A        status: response.status,%0A        statusText: response.statusText,%0A        config,%0A        request%0A      });%0A    });%0A  } catch (err) {%0A    onFinish();%0A    if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {%0A      throw Object.assign(%0A        new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),%0A        {%0A          cause: err.cause || err%0A        }%0A      );%0A    }%0A    throw AxiosError_default.from(err, err && err.code, config, request);%0A  }%0A});%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/adapters/adapters.js%0Avar knownAdapters = {%0A  http: null_default,%0A  xhr: xhr_default,%0A  fetch: fetch_default%0A};%0Autils_default.forEach(knownAdapters, (fn, value) => {%0A  if (fn) {%0A    try {%0A      Object.defineProperty(fn, "name", { value });%0A    } catch (e) {%0A    }%0A    Object.defineProperty(fn, "adapterName", { value });%0A  }%0A});%0Avar renderReason = (reason) => `- ${reason}`;%0Avar isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;%0Avar adapters_default = {%0A  getAdapter: (adapters) => {%0A    adapters = utils_default.isArray(adapters) ? adapters : [adapters];%0A    const { length } = adapters;%0A    let nameOrAdapter;%0A    let adapter;%0A    const rejectedReasons = {};%0A    for (let i = 0; i < length; i++) {%0A      nameOrAdapter = adapters[i];%0A      let id;%0A      adapter = nameOrAdapter;%0A      if (!isResolvedHandle(nameOrAdapter)) {%0A        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];%0A        if (adapter === void 0) {%0A          throw new AxiosError_default(`Unknown adapter \'${id}\'`);%0A        }%0A      }%0A      if (adapter) {%0A        break;%0A      }%0A      rejectedReasons[id || "%23" + i] = adapter;%0A    }%0A    if (!adapter) {%0A      const reasons = Object.entries(rejectedReasons).map(%0A        ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")%0A      );%0A      let s = length ? reasons.length > 1 ? "since :\\n" + reasons.map(renderReason).join("\\n") : " " + renderReason(reasons[0]) : "as no adapter specified";%0A      throw new AxiosError_default(%0A        `There is no suitable adapter to dispatch the request ` + s,%0A        "ERR_NOT_SUPPORT"%0A      );%0A    }%0A    return adapter;%0A  },%0A  adapters: knownAdapters%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/dispatchRequest.js%0Afunction throwIfCancellationRequested(config) {%0A  if (config.cancelToken) {%0A    config.cancelToken.throwIfRequested();%0A  }%0A  if (config.signal && config.signal.aborted) {%0A    throw new CanceledError_default(null, config);%0A  }%0A}%0Afunction dispatchRequest(config) {%0A  throwIfCancellationRequested(config);%0A  config.headers = AxiosHeaders_default.from(config.headers);%0A  config.data = transformData.call(%0A    config,%0A    config.transformRequest%0A  );%0A  if (["post", "put", "patch"].indexOf(config.method) !== -1) {%0A    config.headers.setContentType("application/x-www-form-urlencoded", false);%0A  }%0A  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);%0A  return adapter(config).then(function onAdapterResolution(response) {%0A    throwIfCancellationRequested(config);%0A    response.data = transformData.call(%0A      config,%0A      config.transformResponse,%0A      response%0A    );%0A    response.headers = AxiosHeaders_default.from(response.headers);%0A    return response;%0A  }, function onAdapterRejection(reason) {%0A    if (!isCancel(reason)) {%0A      throwIfCancellationRequested(config);%0A      if (reason && reason.response) {%0A        reason.response.data = transformData.call(%0A          config,%0A          config.transformResponse,%0A          reason.response%0A        );%0A        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);%0A      }%0A    }%0A    return Promise.reject(reason);%0A  });%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/env/data.js%0Avar VERSION = "1.7.4";%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/validator.js%0Avar validators = {};%0A["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {%0A  validators[type] = function validator(thing) {%0A    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;%0A  };%0A});%0Avar deprecatedWarnings = {};%0Avalidators.transitional = function transitional(validator, version, message) {%0A  function formatMessage(opt, desc) {%0A    return "[Axios v" + VERSION + "] Transitional option \'" + opt + "\'" + desc + (message ? ". " + message : "");%0A  }%0A  return (value, opt, opts) => {%0A    if (validator === false) {%0A      throw new AxiosError_default(%0A        formatMessage(opt, " has been removed" + (version ? " in " + version : "")),%0A        AxiosError_default.ERR_DEPRECATED%0A      );%0A    }%0A    if (version && !deprecatedWarnings[opt]) {%0A      deprecatedWarnings[opt] = true;%0A      console.warn(%0A        formatMessage(%0A          opt,%0A          " has been deprecated since v" + version + " and will be removed in the near future"%0A        )%0A      );%0A    }%0A    return validator ? validator(value, opt, opts) : true;%0A  };%0A};%0Afunction assertOptions(options, schema, allowUnknown) {%0A  if (typeof options !== "object") {%0A    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);%0A  }%0A  const keys = Object.keys(options);%0A  let i = keys.length;%0A  while (i-- > 0) {%0A    const opt = keys[i];%0A    const validator = schema[opt];%0A    if (validator) {%0A      const value = options[opt];%0A      const result = value === void 0 || validator(value, opt, options);%0A      if (result !== true) {%0A        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);%0A      }%0A      continue;%0A    }%0A    if (allowUnknown !== true) {%0A      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);%0A    }%0A  }%0A}%0Avar validator_default = {%0A  assertOptions,%0A  validators%0A};%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/core/Axios.js%0Avar validators2 = validator_default.validators;%0Avar Axios = class {%0A  constructor(instanceConfig) {%0A    this.defaults = instanceConfig;%0A    this.interceptors = {%0A      request: new InterceptorManager_default(),%0A      response: new InterceptorManager_default()%0A    };%0A  }%0A  /**%0A   * Dispatch a request%0A   *%0A   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)%0A   * @param {?Object} config%0A   *%0A   * @returns {Promise} The Promise to be fulfilled%0A   */%0A  async request(configOrUrl, config) {%0A    try {%0A      return await this._request(configOrUrl, config);%0A    } catch (err) {%0A      if (err instanceof Error) {%0A        let dummy;%0A        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();%0A        const stack = dummy.stack ? dummy.stack.replace(/^.+\\n/, "") : "";%0A        try {%0A          if (!err.stack) {%0A            err.stack = stack;%0A          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\\n.+\\n/, ""))) {%0A            err.stack += "\\n" + stack;%0A          }%0A        } catch (e) {%0A        }%0A      }%0A      throw err;%0A    }%0A  }%0A  _request(configOrUrl, config) {%0A    if (typeof configOrUrl === "string") {%0A      config = config || {};%0A      config.url = configOrUrl;%0A    } else {%0A      config = configOrUrl || {};%0A    }%0A    config = mergeConfig(this.defaults, config);%0A    const { transitional: transitional2, paramsSerializer, headers } = config;%0A    if (transitional2 !== void 0) {%0A      validator_default.assertOptions(transitional2, {%0A        silentJSONParsing: validators2.transitional(validators2.boolean),%0A        forcedJSONParsing: validators2.transitional(validators2.boolean),%0A        clarifyTimeoutError: validators2.transitional(validators2.boolean)%0A      }, false);%0A    }%0A    if (paramsSerializer != null) {%0A      if (utils_default.isFunction(paramsSerializer)) {%0A        config.paramsSerializer = {%0A          serialize: paramsSerializer%0A        };%0A      } else {%0A        validator_default.assertOptions(paramsSerializer, {%0A          encode: validators2.function,%0A          serialize: validators2.function%0A        }, true);%0A      }%0A    }%0A    config.method = (config.method || this.defaults.method || "get").toLowerCase();%0A    let contextHeaders = headers && utils_default.merge(%0A      headers.common,%0A      headers[config.method]%0A    );%0A    headers && utils_default.forEach(%0A      ["delete", "get", "head", "post", "put", "patch", "common"],%0A      (method) => {%0A        delete headers[method];%0A      }%0A    );%0A    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);%0A    const requestInterceptorChain = [];%0A    let synchronousRequestInterceptors = true;%0A    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {%0A      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {%0A        return;%0A      }%0A      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;%0A      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);%0A    });%0A    const responseInterceptorChain = [];%0A    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {%0A      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);%0A    });%0A    let promise;%0A    let i = 0;%0A    let len;%0A    if (!synchronousRequestInterceptors) {%0A      const chain = [dispatchRequest.bind(this), void 0];%0A      chain.unshift.apply(chain, requestInterceptorChain);%0A      chain.push.apply(chain, responseInterceptorChain);%0A      len = chain.length;%0A      promise = Promise.resolve(config);%0A      while (i < len) {%0A        promise = promise.then(chain[i++], chain[i++]);%0A      }%0A      return promise;%0A    }%0A    len = requestInterceptorChain.length;%0A    let newConfig = config;%0A    i = 0;%0A    while (i < len) {%0A      const onFulfilled = requestInterceptorChain[i++];%0A      const onRejected = requestInterceptorChain[i++];%0A      try {%0A        newConfig = onFulfilled(newConfig);%0A      } catch (error) {%0A        onRejected.call(this, error);%0A        break;%0A      }%0A    }%0A    try {%0A      promise = dispatchRequest.call(this, newConfig);%0A    } catch (error) {%0A      return Promise.reject(error);%0A    }%0A    i = 0;%0A    len = responseInterceptorChain.length;%0A    while (i < len) {%0A      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);%0A    }%0A    return promise;%0A  }%0A  getUri(config) {%0A    config = mergeConfig(this.defaults, config);%0A    const fullPath = buildFullPath(config.baseURL, config.url);%0A    return buildURL(fullPath, config.params, config.paramsSerializer);%0A  }%0A};%0Autils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {%0A  Axios.prototype[method] = function(url, config) {%0A    return this.request(mergeConfig(config || {}, {%0A      method,%0A      url,%0A      data: (config || {}).data%0A    }));%0A  };%0A});%0Autils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {%0A  function generateHTTPMethod(isForm) {%0A    return function httpMethod(url, data, config) {%0A      return this.request(mergeConfig(config || {}, {%0A        method,%0A        headers: isForm ? {%0A          "Content-Type": "multipart/form-data"%0A        } : {},%0A        url,%0A        data%0A      }));%0A    };%0A  }%0A  Axios.prototype[method] = generateHTTPMethod();%0A  Axios.prototype[method + "Form"] = generateHTTPMethod(true);%0A});%0Avar Axios_default = Axios;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/cancel/CancelToken.js%0Avar CancelToken = class _CancelToken {%0A  constructor(executor) {%0A    if (typeof executor !== "function") {%0A      throw new TypeError("executor must be a function.");%0A    }%0A    let resolvePromise;%0A    this.promise = new Promise(function promiseExecutor(resolve) {%0A      resolvePromise = resolve;%0A    });%0A    const token = this;%0A    this.promise.then((cancel) => {%0A      if (!token._listeners) return;%0A      let i = token._listeners.length;%0A      while (i-- > 0) {%0A        token._listeners[i](cancel);%0A      }%0A      token._listeners = null;%0A    });%0A    this.promise.then = (onfulfilled) => {%0A      let _resolve;%0A      const promise = new Promise((resolve) => {%0A        token.subscribe(resolve);%0A        _resolve = resolve;%0A      }).then(onfulfilled);%0A      promise.cancel = function reject() {%0A        token.unsubscribe(_resolve);%0A      };%0A      return promise;%0A    };%0A    executor(function cancel(message, config, request) {%0A      if (token.reason) {%0A        return;%0A      }%0A      token.reason = new CanceledError_default(message, config, request);%0A      resolvePromise(token.reason);%0A    });%0A  }%0A  /**%0A   * Throws a `CanceledError` if cancellation has been requested.%0A   */%0A  throwIfRequested() {%0A    if (this.reason) {%0A      throw this.reason;%0A    }%0A  }%0A  /**%0A   * Subscribe to the cancel signal%0A   */%0A  subscribe(listener) {%0A    if (this.reason) {%0A      listener(this.reason);%0A      return;%0A    }%0A    if (this._listeners) {%0A      this._listeners.push(listener);%0A    } else {%0A      this._listeners = [listener];%0A    }%0A  }%0A  /**%0A   * Unsubscribe from the cancel signal%0A   */%0A  unsubscribe(listener) {%0A    if (!this._listeners) {%0A      return;%0A    }%0A    const index = this._listeners.indexOf(listener);%0A    if (index !== -1) {%0A      this._listeners.splice(index, 1);%0A    }%0A  }%0A  /**%0A   * Returns an object that contains a new `CancelToken` and a function that, when called,%0A   * cancels the `CancelToken`.%0A   */%0A  static source() {%0A    let cancel;%0A    const token = new _CancelToken(function executor(c) {%0A      cancel = c;%0A    });%0A    return {%0A      token,%0A      cancel%0A    };%0A  }%0A};%0Avar CancelToken_default = CancelToken;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/spread.js%0Afunction spread(callback) {%0A  return function wrap2(arr) {%0A    return callback.apply(null, arr);%0A  };%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/isAxiosError.js%0Afunction isAxiosError(payload) {%0A  return utils_default.isObject(payload) && payload.isAxiosError === true;%0A}%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/helpers/HttpStatusCode.js%0Avar HttpStatusCode = {%0A  Continue: 100,%0A  SwitchingProtocols: 101,%0A  Processing: 102,%0A  EarlyHints: 103,%0A  Ok: 200,%0A  Created: 201,%0A  Accepted: 202,%0A  NonAuthoritativeInformation: 203,%0A  NoContent: 204,%0A  ResetContent: 205,%0A  PartialContent: 206,%0A  MultiStatus: 207,%0A  AlreadyReported: 208,%0A  ImUsed: 226,%0A  MultipleChoices: 300,%0A  MovedPermanently: 301,%0A  Found: 302,%0A  SeeOther: 303,%0A  NotModified: 304,%0A  UseProxy: 305,%0A  Unused: 306,%0A  TemporaryRedirect: 307,%0A  PermanentRedirect: 308,%0A  BadRequest: 400,%0A  Unauthorized: 401,%0A  PaymentRequired: 402,%0A  Forbidden: 403,%0A  NotFound: 404,%0A  MethodNotAllowed: 405,%0A  NotAcceptable: 406,%0A  ProxyAuthenticationRequired: 407,%0A  RequestTimeout: 408,%0A  Conflict: 409,%0A  Gone: 410,%0A  LengthRequired: 411,%0A  PreconditionFailed: 412,%0A  PayloadTooLarge: 413,%0A  UriTooLong: 414,%0A  UnsupportedMediaType: 415,%0A  RangeNotSatisfiable: 416,%0A  ExpectationFailed: 417,%0A  ImATeapot: 418,%0A  MisdirectedRequest: 421,%0A  UnprocessableEntity: 422,%0A  Locked: 423,%0A  FailedDependency: 424,%0A  TooEarly: 425,%0A  UpgradeRequired: 426,%0A  PreconditionRequired: 428,%0A  TooManyRequests: 429,%0A  RequestHeaderFieldsTooLarge: 431,%0A  UnavailableForLegalReasons: 451,%0A  InternalServerError: 500,%0A  NotImplemented: 501,%0A  BadGateway: 502,%0A  ServiceUnavailable: 503,%0A  GatewayTimeout: 504,%0A  HttpVersionNotSupported: 505,%0A  VariantAlsoNegotiates: 506,%0A  InsufficientStorage: 507,%0A  LoopDetected: 508,%0A  NotExtended: 510,%0A  NetworkAuthenticationRequired: 511%0A};%0AObject.entries(HttpStatusCode).forEach(([key, value]) => {%0A  HttpStatusCode[value] = key;%0A});%0Avar HttpStatusCode_default = HttpStatusCode;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/lib/axios.js%0Afunction createInstance(defaultConfig) {%0A  const context = new Axios_default(defaultConfig);%0A  const instance2 = bind(Axios_default.prototype.request, context);%0A  utils_default.extend(instance2, Axios_default.prototype, context, { allOwnKeys: true });%0A  utils_default.extend(instance2, context, null, { allOwnKeys: true });%0A  instance2.create = function create(instanceConfig) {%0A    return createInstance(mergeConfig(defaultConfig, instanceConfig));%0A  };%0A  return instance2;%0A}%0Avar axios = createInstance(defaults_default);%0Aaxios.Axios = Axios_default;%0Aaxios.CanceledError = CanceledError_default;%0Aaxios.CancelToken = CancelToken_default;%0Aaxios.isCancel = isCancel;%0Aaxios.VERSION = VERSION;%0Aaxios.toFormData = toFormData_default;%0Aaxios.AxiosError = AxiosError_default;%0Aaxios.Cancel = axios.CanceledError;%0Aaxios.all = function all(promises) {%0A  return Promise.all(promises);%0A};%0Aaxios.spread = spread;%0Aaxios.isAxiosError = isAxiosError;%0Aaxios.mergeConfig = mergeConfig;%0Aaxios.AxiosHeaders = AxiosHeaders_default;%0Aaxios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);%0Aaxios.getAdapter = adapters_default.getAdapter;%0Aaxios.HttpStatusCode = HttpStatusCode_default;%0Aaxios.default = axios;%0Avar axios_default = axios;%0A%0A// ../../../../node_modules/.pnpm/axios@1.7.4_debug@4.3.5/node_modules/axios/index.js%0Avar {%0A  Axios: Axios2,%0A  AxiosError: AxiosError2,%0A  CanceledError: CanceledError2,%0A  isCancel: isCancel2,%0A  CancelToken: CancelToken2,%0A  VERSION: VERSION2,%0A  all: all2,%0A  Cancel,%0A  isAxiosError: isAxiosError2,%0A  spread: spread2,%0A  toFormData: toFormData2,%0A  AxiosHeaders: AxiosHeaders2,%0A  HttpStatusCode: HttpStatusCode2,%0A  formToJSON,%0A  getAdapter,%0A  mergeConfig: mergeConfig2%0A} = axios_default;%0A%0A// ../../../../node_modules/.pnpm/@thewtex+zstddec@0.2.1/node_modules/@thewtex/zstddec/dist/zstddec.modern.js%0Avar init;%0Avar instance;%0Avar heap;%0Avar IMPORT_OBJECT = {%0A  env: {%0A    emscripten_notify_memory_growth: function(index) {%0A      heap = new Uint8Array(instance.exports.memory.buffer);%0A    }%0A  }%0A};%0Avar ZSTDDecoder = class {%0A  init() {%0A    if (init) return init;%0A    if (typeof fetch !== "undefined") {%0A      init = fetch("data:application/wasm;base64," + wasm).then((response) => response.arrayBuffer()).then((arrayBuffer) => WebAssembly.instantiate(arrayBuffer, IMPORT_OBJECT)).then(this._init);%0A    } else {%0A      init = WebAssembly.instantiate(Buffer.from(wasm, "base64"), IMPORT_OBJECT).then(this._init);%0A    }%0A    return init;%0A  }%0A  _init(result) {%0A    instance = result.instance;%0A    IMPORT_OBJECT.env.emscripten_notify_memory_growth(0);%0A  }%0A  decode(array, uncompressedSize = 0) {%0A    if (!instance) throw new Error(`ZSTDDecoder: Await .init() before decoding.`);%0A    const compressedSize = array.byteLength;%0A    const compressedPtr = instance.exports.malloc(compressedSize);%0A    heap.set(array, compressedPtr);%0A    uncompressedSize = uncompressedSize || Number(instance.exports.ZSTD_findDecompressedSize(compressedPtr, compressedSize));%0A    const uncompressedPtr = instance.exports.malloc(uncompressedSize);%0A    const actualSize = instance.exports.ZSTD_decompress(uncompressedPtr, uncompressedSize, compressedPtr, compressedSize);%0A    const dec = heap.slice(uncompressedPtr, uncompressedPtr + actualSize);%0A    instance.exports.free(compressedPtr);%0A    instance.exports.free(uncompressedPtr);%0A    return dec;%0A  }%0A};%0Avar wasm = "";%0A%0A// dist/pipeline/internal/load-emscripten-module-web-worker.js%0Avar decoder = new ZSTDDecoder();%0Avar decoderInitialized = false;%0Aasync function loadEmscriptenModuleWebWorker(moduleRelativePathOrURL, baseUrl, queryParams) {%0A  let modulePrefix = null;%0A  if (typeof moduleRelativePathOrURL !== "string") {%0A    modulePrefix = moduleRelativePathOrURL.href;%0A  } else if (moduleRelativePathOrURL.startsWith("http")) {%0A    modulePrefix = moduleRelativePathOrURL;%0A  } else {%0A    modulePrefix = `${baseUrl}/${moduleRelativePathOrURL}`;%0A  }%0A  if (modulePrefix.endsWith(".js")) {%0A    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 3);%0A  }%0A  if (modulePrefix.endsWith(".wasm")) {%0A    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 5);%0A  }%0A  if (modulePrefix.endsWith(".wasm.zst")) {%0A    modulePrefix = modulePrefix.substring(0, modulePrefix.length - 9);%0A  }%0A  const wasmBinaryPath = `${modulePrefix}.wasm`;%0A  const response = await axios_default.get(`${wasmBinaryPath}.zst`, {%0A    responseType: "arraybuffer",%0A    params: queryParams%0A  });%0A  if (!decoderInitialized) {%0A    await decoder.init();%0A    decoderInitialized = true;%0A  }%0A  const decompressedArray = decoder.decode(new Uint8Array(response.data));%0A  const wasmBinary = decompressedArray.buffer;%0A  const modulePath = `${modulePrefix}.js`;%0A  const result = await import(%0A    /* webpackIgnore: true */%0A    /* @vite-ignore */%0A    modulePath%0A  );%0A  const emscriptenModule = result.default({%0A    wasmBinary%0A  });%0A  return emscriptenModule;%0A}%0Avar load_emscripten_module_web_worker_default = loadEmscriptenModuleWebWorker;%0A%0A// dist/pipeline/web-workers/load-pipeline-module.js%0Avar pipelineToModule = /* @__PURE__ */ new Map();%0Aasync function loadPipelineModule(pipelinePath, baseUrl, queryParams) {%0A  let moduleRelativePathOrURL = pipelinePath;%0A  let pipeline = pipelinePath;%0A  let pipelineModule = null;%0A  if (typeof pipelinePath !== "string") {%0A    moduleRelativePathOrURL = new URL(pipelinePath.href);%0A    pipeline = moduleRelativePathOrURL.href;%0A  }%0A  if (pipelineToModule.has(pipeline)) {%0A    pipelineModule = await pipelineToModule.get(pipeline);%0A  } else {%0A    pipelineToModule.set(pipeline, load_emscripten_module_web_worker_default(moduleRelativePathOrURL, baseUrl, queryParams));%0A    pipelineModule = await pipelineToModule.get(pipeline);%0A  }%0A  return pipelineModule;%0A}%0Avar load_pipeline_module_default = loadPipelineModule;%0A%0A// dist/interface-types/interface-types.js%0Avar InterfaceTypes = {%0A  TextFile: "TextFile",%0A  BinaryFile: "BinaryFile",%0A  TextStream: "TextStream",%0A  BinaryStream: "BinaryStream",%0A  Image: "Image",%0A  PointSet: "PointSet",%0A  Mesh: "Mesh",%0A  PolyData: "PolyData",%0A  TransformList: "TransformList",%0A  JsonCompatible: "JsonCompatible"%0A};%0Avar interface_types_default = InterfaceTypes;%0A%0A// dist/interface-types/int-types.js%0Avar IntTypes = {%0A  Int8: "int8",%0A  UInt8: "uint8",%0A  Int16: "int16",%0A  UInt16: "uint16",%0A  Int32: "int32",%0A  UInt32: "uint32",%0A  Int64: "int64",%0A  UInt64: "uint64",%0A  SizeValueType: "uint64",%0A  IdentifierType: "uint64",%0A  IndexValueType: "int64",%0A  OffsetValueType: "int64"%0A};%0Avar int_types_default = IntTypes;%0A%0A// dist/interface-types/float-types.js%0Avar FloatTypes = {%0A  Float32: "float32",%0A  Float64: "float64",%0A  SpacePrecisionType: "float64"%0A};%0Avar float_types_default = FloatTypes;%0A%0A// dist/buffer-to-typed-array.js%0Afunction bufferToTypedArray(wasmType, buffer) {%0A  let typedArray = null;%0A  switch (wasmType) {%0A    case int_types_default.UInt8: {%0A      typedArray = new Uint8Array(buffer);%0A      break;%0A    }%0A    case int_types_default.Int8: {%0A      typedArray = new Int8Array(buffer);%0A      break;%0A    }%0A    case int_types_default.UInt16: {%0A      typedArray = new Uint16Array(buffer);%0A      break;%0A    }%0A    case int_types_default.Int16: {%0A      typedArray = new Int16Array(buffer);%0A      break;%0A    }%0A    case int_types_default.UInt32: {%0A      typedArray = new Uint32Array(buffer);%0A      break;%0A    }%0A    case int_types_default.Int32: {%0A      typedArray = new Int32Array(buffer);%0A      break;%0A    }%0A    case int_types_default.UInt64: {%0A      if (typeof globalThis.BigUint64Array === "function") {%0A        typedArray = new BigUint64Array(buffer);%0A      } else {%0A        typedArray = new Uint8Array(buffer);%0A      }%0A      break;%0A    }%0A    case int_types_default.Int64: {%0A      if (typeof globalThis.BigInt64Array === "function") {%0A        typedArray = new BigInt64Array(buffer);%0A      } else {%0A        typedArray = new Uint8Array(buffer);%0A      }%0A      break;%0A    }%0A    case float_types_default.Float32: {%0A      typedArray = new Float32Array(buffer);%0A      break;%0A    }%0A    case float_types_default.Float64: {%0A      typedArray = new Float64Array(buffer);%0A      break;%0A    }%0A    case "null": {%0A      typedArray = null;%0A      break;%0A    }%0A    case null: {%0A      typedArray = null;%0A      break;%0A    }%0A    default:%0A      throw new Error("Type is not supported as a TypedArray");%0A  }%0A  return typedArray;%0A}%0Avar buffer_to_typed_array_default = bufferToTypedArray;%0A%0A// dist/pipeline/internal/run-pipeline-emscripten.js%0Avar haveSharedArrayBuffer = typeof globalThis.SharedArrayBuffer === "function";%0Avar encoder = new TextEncoder();%0Avar decoder2 = new TextDecoder("utf-8");%0Afunction readFileSharedArray(emscriptenModule, path) {%0A  const opts = { flags: "r", encoding: "binary" };%0A  const stream = emscriptenModule.fs_open(path, opts.flags);%0A  const stat = emscriptenModule.fs_stat(path);%0A  const length = stat.size;%0A  let arrayBufferData = null;%0A  if (haveSharedArrayBuffer) {%0A    arrayBufferData = new SharedArrayBuffer(length);%0A  } else {%0A    arrayBufferData = new ArrayBuffer(length);%0A  }%0A  const array = new Uint8Array(arrayBufferData);%0A  emscriptenModule.fs_read(stream, array, 0, length, 0);%0A  emscriptenModule.fs_close(stream);%0A  return array;%0A}%0Afunction memoryUint8SharedArray(emscriptenModule, byteOffset, length) {%0A  let arrayBufferData = null;%0A  if (haveSharedArrayBuffer) {%0A    arrayBufferData = new SharedArrayBuffer(length);%0A  } else {%0A    arrayBufferData = new ArrayBuffer(length);%0A  }%0A  const array = new Uint8Array(arrayBufferData);%0A  const dataArrayView = new Uint8Array(emscriptenModule.HEAPU8.buffer, byteOffset, length);%0A  array.set(dataArrayView);%0A  return array;%0A}%0Afunction setPipelineModuleInputArray(emscriptenModule, dataArray, inputIndex, subIndex) {%0A  let dataPtr = 0;%0A  if (dataArray !== null) {%0A    dataPtr = emscriptenModule.ccall("itk_wasm_input_array_alloc", "number", ["number", "number", "number", "number"], [0, inputIndex, subIndex, dataArray.buffer.byteLength]);%0A    emscriptenModule.HEAPU8.set(new Uint8Array(dataArray.buffer), dataPtr);%0A  }%0A  return dataPtr;%0A}%0Afunction setPipelineModuleInputJSON(emscriptenModule, dataObject, inputIndex) {%0A  const dataJSON = JSON.stringify(dataObject);%0A  const length = emscriptenModule.lengthBytesUTF8(dataJSON) + 1;%0A  const jsonPtr = emscriptenModule.ccall("itk_wasm_input_json_alloc", "number", ["number", "number", "number"], [0, inputIndex, length]);%0A  emscriptenModule.stringToUTF8(dataJSON, jsonPtr, length);%0A}%0Afunction getPipelineModuleOutputArray(emscriptenModule, outputIndex, subIndex, componentType) {%0A  const dataPtr = emscriptenModule.ccall("itk_wasm_output_array_address", "number", ["number", "number", "number"], [0, outputIndex, subIndex]);%0A  const dataSize = emscriptenModule.ccall("itk_wasm_output_array_size", "number", ["number", "number", "number"], [0, outputIndex, subIndex]);%0A  const dataUint8 = memoryUint8SharedArray(emscriptenModule, dataPtr, dataSize);%0A  const data = buffer_to_typed_array_default(componentType, dataUint8.buffer);%0A  return data;%0A}%0Afunction getPipelineModuleOutputJSON(emscriptenModule, outputIndex) {%0A  const jsonPtr = emscriptenModule.ccall("itk_wasm_output_json_address", "number", ["number", "number"], [0, outputIndex]);%0A  const dataJSON = emscriptenModule.UTF8ToString(jsonPtr);%0A  const dataObject = JSON.parse(dataJSON);%0A  return dataObject;%0A}%0Afunction runPipelineEmscripten(pipelineModule, args, outputs, inputs) {%0A  if (!(inputs == null) && inputs.length > 0) {%0A    inputs.forEach(function(input, index) {%0A      switch (input.type) {%0A        case interface_types_default.TextStream: {%0A          const dataArray = encoder.encode(input.data.data);%0A          const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0);%0A          const dataJSON = {%0A            size: dataArray.buffer.byteLength,%0A            data: `data:application/vnd.itk.address,0:${arrayPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);%0A          break;%0A        }%0A        case interface_types_default.JsonCompatible: {%0A          const dataArray = encoder.encode(JSON.stringify(input.data));%0A          const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0);%0A          const dataJSON = {%0A            size: dataArray.buffer.byteLength,%0A            data: `data:application/vnd.itk.address,0:${arrayPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);%0A          break;%0A        }%0A        case interface_types_default.BinaryStream: {%0A          const dataArray = input.data.data;%0A          const arrayPtr = setPipelineModuleInputArray(pipelineModule, dataArray, index, 0);%0A          const dataJSON = {%0A            size: dataArray.buffer.byteLength,%0A            data: `data:application/vnd.itk.address,0:${arrayPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, dataJSON, index);%0A          break;%0A        }%0A        case interface_types_default.TextFile: {%0A          pipelineModule.fs_writeFile(input.data.path, input.data.data);%0A          break;%0A        }%0A        case interface_types_default.BinaryFile: {%0A          pipelineModule.fs_writeFile(input.data.path, input.data.data);%0A          break;%0A        }%0A        case interface_types_default.Image: {%0A          const image = input.data;%0A          const dataPtr = setPipelineModuleInputArray(pipelineModule, image.data, index, 0);%0A          const directionPtr = setPipelineModuleInputArray(pipelineModule, image.direction, index, 1);%0A          const metadata = typeof image.metadata?.entries !== "undefined" ? Array.from(image.metadata.entries()) : [];%0A          const imageJSON = {%0A            imageType: image.imageType,%0A            name: image.name,%0A            origin: image.origin,%0A            spacing: image.spacing,%0A            direction: `data:application/vnd.itk.address,0:${directionPtr}`,%0A            size: image.size,%0A            data: `data:application/vnd.itk.address,0:${dataPtr}`,%0A            metadata%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, imageJSON, index);%0A          break;%0A        }%0A        case interface_types_default.Mesh: {%0A          const mesh = input.data;%0A          const pointsPtr = setPipelineModuleInputArray(pipelineModule, mesh.points, index, 0);%0A          const cellsPtr = setPipelineModuleInputArray(pipelineModule, mesh.cells, index, 1);%0A          const pointDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.pointData, index, 2);%0A          const cellDataPtr = setPipelineModuleInputArray(pipelineModule, mesh.cellData, index, 3);%0A          const meshJSON = {%0A            meshType: mesh.meshType,%0A            name: mesh.name,%0A            numberOfPoints: mesh.numberOfPoints,%0A            points: `data:application/vnd.itk.address,0:${pointsPtr}`,%0A            numberOfCells: mesh.numberOfCells,%0A            cells: `data:application/vnd.itk.address,0:${cellsPtr}`,%0A            cellBufferSize: mesh.cellBufferSize,%0A            numberOfPointPixels: mesh.numberOfPointPixels,%0A            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,%0A            numberOfCellPixels: mesh.numberOfCellPixels,%0A            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, meshJSON, index);%0A          break;%0A        }%0A        case interface_types_default.PointSet: {%0A          const pointSet = input.data;%0A          const pointsPtr = setPipelineModuleInputArray(pipelineModule, pointSet.points, index, 0);%0A          const pointDataPtr = setPipelineModuleInputArray(pipelineModule, pointSet.pointData, index, 1);%0A          const pointSetJSON = {%0A            pointSetType: pointSet.pointSetType,%0A            name: pointSet.name,%0A            numberOfPoints: pointSet.numberOfPoints,%0A            points: `data:application/vnd.itk.address,0:${pointsPtr}`,%0A            numberOfPointPixels: pointSet.numberOfPointPixels,%0A            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, pointSetJSON, index);%0A          break;%0A        }%0A        case interface_types_default.TransformList: {%0A          const transformList = input.data;%0A          const transformListJSON = [];%0A          transformList.forEach((transform, transformIndex) => {%0A            const fixedParameterPtr = setPipelineModuleInputArray(pipelineModule, transform.fixedParameters, index, transformIndex * 2);%0A            const fixedParameters = `data:application/vnd.itk.address,0:${fixedParameterPtr}`;%0A            const parameterPtr = setPipelineModuleInputArray(pipelineModule, transform.parameters, index, transformIndex * 2 + 1);%0A            const parameters = `data:application/vnd.itk.address,0:${parameterPtr}`;%0A            const transformJSON = {%0A              transformType: transform.transformType,%0A              numberOfFixedParameters: transform.numberOfFixedParameters,%0A              numberOfParameters: transform.numberOfParameters,%0A              name: transform.name,%0A              inputSpaceName: transform.inputSpaceName,%0A              outputSpaceName: transform.outputSpaceName,%0A              parameters,%0A              fixedParameters%0A            };%0A            transformListJSON.push(transformJSON);%0A          });%0A          setPipelineModuleInputJSON(pipelineModule, transformListJSON, index);%0A          break;%0A        }%0A        case interface_types_default.PolyData: {%0A          const polyData = input.data;%0A          const pointsPtr = setPipelineModuleInputArray(pipelineModule, polyData.points, index, 0);%0A          const verticesPtr = setPipelineModuleInputArray(pipelineModule, polyData.vertices, index, 1);%0A          const linesPtr = setPipelineModuleInputArray(pipelineModule, polyData.lines, index, 2);%0A          const polygonsPtr = setPipelineModuleInputArray(pipelineModule, polyData.polygons, index, 3);%0A          const triangleStripsPtr = setPipelineModuleInputArray(pipelineModule, polyData.triangleStrips, index, 4);%0A          const pointDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 5);%0A          const cellDataPtr = setPipelineModuleInputArray(pipelineModule, polyData.pointData, index, 6);%0A          const polyDataJSON = {%0A            polyDataType: polyData.polyDataType,%0A            name: polyData.name,%0A            numberOfPoints: polyData.numberOfPoints,%0A            points: `data:application/vnd.itk.address,0:${pointsPtr}`,%0A            verticesBufferSize: polyData.verticesBufferSize,%0A            vertices: `data:application/vnd.itk.address,0:${verticesPtr}`,%0A            linesBufferSize: polyData.linesBufferSize,%0A            lines: `data:application/vnd.itk.address,0:${linesPtr}`,%0A            polygonsBufferSize: polyData.polygonsBufferSize,%0A            polygons: `data:application/vnd.itk.address,0:${polygonsPtr}`,%0A            triangleStripsBufferSize: polyData.triangleStripsBufferSize,%0A            triangleStrips: `data:application/vnd.itk.address,0:${triangleStripsPtr}`,%0A            numberOfPointPixels: polyData.numberOfPointPixels,%0A            pointData: `data:application/vnd.itk.address,0:${pointDataPtr}`,%0A            numberOfCellPixels: polyData.numberOfCellPixels,%0A            cellData: `data:application/vnd.itk.address,0:${cellDataPtr}`%0A          };%0A          setPipelineModuleInputJSON(pipelineModule, polyDataJSON, index);%0A          break;%0A        }%0A        default:%0A          throw Error("Unsupported input InterfaceType");%0A      }%0A    });%0A  }%0A  pipelineModule.resetModuleStdout();%0A  pipelineModule.resetModuleStderr();%0A  const stackPtr = pipelineModule.stackSave();%0A  let returnValue = 0;%0A  try {%0A    returnValue = pipelineModule.callMain(args.slice());%0A  } catch (exception) {%0A    if (typeof exception === "number") {%0A      console.log("Exception while running pipeline:");%0A      console.log("stdout:", pipelineModule.getModuleStdout());%0A      console.error("stderr:", pipelineModule.getModuleStderr());%0A      if (typeof pipelineModule.getExceptionMessage !== "undefined") {%0A        console.error("exception:", pipelineModule.getExceptionMessage(exception));%0A      } else {%0A        console.error("Build module in Debug mode for exception message information.");%0A      }%0A    }%0A    throw exception;%0A  } finally {%0A    pipelineModule.stackRestore(stackPtr);%0A  }%0A  const stdout = pipelineModule.getModuleStdout();%0A  const stderr = pipelineModule.getModuleStderr();%0A  const populatedOutputs = [];%0A  if (!(outputs == null) && outputs.length > 0 && returnValue === 0) {%0A    outputs.forEach(function(output, index) {%0A      let outputData = null;%0A      switch (output.type) {%0A        case interface_types_default.TextStream: {%0A          const dataPtr = pipelineModule.ccall("itk_wasm_output_array_address", "number", ["number", "number", "number"], [0, index, 0]);%0A          const dataSize = pipelineModule.ccall("itk_wasm_output_array_size", "number", ["number", "number", "number"], [0, index, 0]);%0A          const dataArrayView = new Uint8Array(pipelineModule.HEAPU8.buffer, dataPtr, dataSize);%0A          outputData = { data: decoder2.decode(dataArrayView) };%0A          break;%0A        }%0A        case interface_types_default.JsonCompatible: {%0A          const dataPtr = pipelineModule.ccall("itk_wasm_output_array_address", "number", ["number", "number", "number"], [0, index, 0]);%0A          const dataSize = pipelineModule.ccall("itk_wasm_output_array_size", "number", ["number", "number", "number"], [0, index, 0]);%0A          const dataArrayView = new Uint8Array(pipelineModule.HEAPU8.buffer, dataPtr, dataSize);%0A          outputData = JSON.parse(decoder2.decode(dataArrayView));%0A          break;%0A        }%0A        case interface_types_default.BinaryStream: {%0A          const dataPtr = pipelineModule.ccall("itk_wasm_output_array_address", "number", ["number", "number", "number"], [0, index, 0]);%0A          const dataSize = pipelineModule.ccall("itk_wasm_output_array_size", "number", ["number", "number", "number"], [0, index, 0]);%0A          outputData = {%0A            data: memoryUint8SharedArray(pipelineModule, dataPtr, dataSize)%0A          };%0A          break;%0A        }%0A        case interface_types_default.TextFile: {%0A          outputData = {%0A            path: output.data.path,%0A            data: pipelineModule.fs_readFile(output.data.path, {%0A              encoding: "utf8"%0A            })%0A          };%0A          break;%0A        }%0A        case interface_types_default.BinaryFile: {%0A          outputData = {%0A            path: output.data.path,%0A            data: readFileSharedArray(pipelineModule, output.data.path)%0A          };%0A          break;%0A        }%0A        case interface_types_default.Image: {%0A          const image = getPipelineModuleOutputJSON(pipelineModule, index);%0A          image.data = getPipelineModuleOutputArray(pipelineModule, index, 0, image.imageType.componentType);%0A          image.direction = getPipelineModuleOutputArray(pipelineModule, index, 1, float_types_default.Float64);%0A          image.metadata = new Map(image.metadata);%0A          outputData = image;%0A          break;%0A        }%0A        case interface_types_default.Mesh: {%0A          const mesh = getPipelineModuleOutputJSON(pipelineModule, index);%0A          if (mesh.numberOfPoints > 0) {%0A            mesh.points = getPipelineModuleOutputArray(pipelineModule, index, 0, mesh.meshType.pointComponentType);%0A          } else {%0A            mesh.points = buffer_to_typed_array_default(mesh.meshType.pointComponentType, new ArrayBuffer(0));%0A          }%0A          if (mesh.numberOfCells > 0) {%0A            mesh.cells = getPipelineModuleOutputArray(pipelineModule, index, 1, mesh.meshType.cellComponentType);%0A          } else {%0A            mesh.cells = buffer_to_typed_array_default(mesh.meshType.cellComponentType, new ArrayBuffer(0));%0A          }%0A          if (mesh.numberOfPointPixels > 0) {%0A            mesh.pointData = getPipelineModuleOutputArray(pipelineModule, index, 2, mesh.meshType.pointPixelComponentType);%0A          } else {%0A            mesh.pointData = buffer_to_typed_array_default(mesh.meshType.pointPixelComponentType, new ArrayBuffer(0));%0A          }%0A          if (mesh.numberOfCellPixels > 0) {%0A            mesh.cellData = getPipelineModuleOutputArray(pipelineModule, index, 3, mesh.meshType.cellPixelComponentType);%0A          } else {%0A            mesh.cellData = buffer_to_typed_array_default(mesh.meshType.cellPixelComponentType, new ArrayBuffer(0));%0A          }%0A          outputData = mesh;%0A          break;%0A        }%0A        case interface_types_default.PointSet: {%0A          const pointSet = getPipelineModuleOutputJSON(pipelineModule, index);%0A          if (pointSet.numberOfPoints > 0) {%0A            pointSet.points = getPipelineModuleOutputArray(pipelineModule, index, 0, pointSet.pointSetType.pointComponentType);%0A          } else {%0A            pointSet.points = buffer_to_typed_array_default(pointSet.pointSetType.pointComponentType, new ArrayBuffer(0));%0A          }%0A          if (pointSet.numberOfPointPixels > 0) {%0A            pointSet.pointData = getPipelineModuleOutputArray(pipelineModule, index, 1, pointSet.pointSetType.pointPixelComponentType);%0A          } else {%0A            pointSet.pointData = buffer_to_typed_array_default(pointSet.pointSetType.pointPixelComponentType, new ArrayBuffer(0));%0A          }%0A          outputData = pointSet;%0A          break;%0A        }%0A        case interface_types_default.TransformList: {%0A          const transformList = getPipelineModuleOutputJSON(pipelineModule, index);%0A          transformList.forEach((transform, transformIndex) => {%0A            if (transform.numberOfFixedParameters > 0) {%0A              transformList[transformIndex].fixedParameters = getPipelineModuleOutputArray(pipelineModule, index, transformIndex * 2, transform.transformType.parametersValueType);%0A            }%0A            if (transform.numberOfFixedParameters > 0) {%0A              transformList[transformIndex].parameters = getPipelineModuleOutputArray(pipelineModule, index, transformIndex * 2 + 1, transform.transformType.parametersValueType);%0A            }%0A          });%0A          outputData = transformList;%0A          break;%0A        }%0A        case interface_types_default.PolyData: {%0A          const polyData = getPipelineModuleOutputJSON(pipelineModule, index);%0A          if (polyData.numberOfPoints > 0) {%0A            polyData.points = getPipelineModuleOutputArray(pipelineModule, index, 0, float_types_default.Float32);%0A          } else {%0A            polyData.points = new Float32Array();%0A          }%0A          if (polyData.verticesBufferSize > 0) {%0A            polyData.vertices = getPipelineModuleOutputArray(pipelineModule, index, 1, int_types_default.UInt32);%0A          } else {%0A            polyData.vertices = new Uint32Array();%0A          }%0A          if (polyData.linesBufferSize > 0) {%0A            polyData.lines = getPipelineModuleOutputArray(pipelineModule, index, 2, int_types_default.UInt32);%0A          } else {%0A            polyData.lines = new Uint32Array();%0A          }%0A          if (polyData.polygonsBufferSize > 0) {%0A            polyData.polygons = getPipelineModuleOutputArray(pipelineModule, index, 3, int_types_default.UInt32);%0A          } else {%0A            polyData.polygons = new Uint32Array();%0A          }%0A          if (polyData.triangleStripsBufferSize > 0) {%0A            polyData.triangleStrips = getPipelineModuleOutputArray(pipelineModule, index, 4, int_types_default.UInt32);%0A          } else {%0A            polyData.triangleStrips = new Uint32Array();%0A          }%0A          if (polyData.numberOfPointPixels > 0) {%0A            polyData.pointData = getPipelineModuleOutputArray(pipelineModule, index, 5, polyData.polyDataType.pointPixelComponentType);%0A          } else {%0A            polyData.pointData = buffer_to_typed_array_default(polyData.polyDataType.pointPixelComponentType, new ArrayBuffer(0));%0A          }%0A          if (polyData.numberOfCellPixels > 0) {%0A            polyData.cellData = getPipelineModuleOutputArray(pipelineModule, index, 6, polyData.polyDataType.cellPixelComponentType);%0A          } else {%0A            polyData.cellData = buffer_to_typed_array_default(polyData.polyDataType.cellPixelComponentType, new ArrayBuffer(0));%0A          }%0A          outputData = polyData;%0A          break;%0A        }%0A        default:%0A          throw Error("Unsupported output InterfaceType");%0A      }%0A      const populatedOutput = {%0A        type: output.type,%0A        data: outputData%0A      };%0A      populatedOutputs.push(populatedOutput);%0A    });%0A  }%0A  return { returnValue, stdout, stderr, outputs: populatedOutputs };%0A}%0Avar run_pipeline_emscripten_default = runPipelineEmscripten;%0A%0A// dist/get-transferables.js%0Avar haveSharedArrayBuffer2 = typeof globalThis.SharedArrayBuffer !== "undefined";%0Afunction getTransferables(data, noCopy) {%0A  if (data === void 0 || data === null) {%0A    return [];%0A  }%0A  const transferables = [];%0A  for (let i = 0; i < data.length; i++) {%0A    const transferable = getTransferable(data[i], noCopy);%0A    if (transferable !== null) {%0A      transferables.push(transferable);%0A    }%0A  }%0A  return transferables;%0A}%0Afunction getTransferable(data, noCopy) {%0A  if (data === void 0 || data === null) {%0A    return null;%0A  }%0A  let result = null;%0A  if (data.buffer !== void 0) {%0A    result = data.buffer;%0A  } else if (data.byteLength !== void 0) {%0A    result = data;%0A  }%0A  if (haveSharedArrayBuffer2 && result instanceof SharedArrayBuffer) {%0A    return null;%0A  }%0A  if (noCopy) {%0A    return result;%0A  }%0A  return result.slice(0);%0A}%0Avar get_transferables_default = getTransferables;%0A%0A// dist/pipeline/internal/image-transferables.js%0Afunction imageTransferables(image) {%0A  return [%0A    image.data,%0A    image.direction%0A  ];%0A}%0Avar image_transferables_default = imageTransferables;%0A%0A// dist/pipeline/internal/mesh-transferables.js%0Afunction meshTransferables(mesh) {%0A  return [%0A    mesh.points,%0A    mesh.pointData,%0A    mesh.cells,%0A    mesh.cellData%0A  ];%0A}%0Avar mesh_transferables_default = meshTransferables;%0A%0A// dist/pipeline/internal/poly-data-transferables.js%0Afunction polyDataTransferables(polyData) {%0A  return [%0A    polyData.points,%0A    polyData.vertices,%0A    polyData.lines,%0A    polyData.polygons,%0A    polyData.triangleStrips,%0A    polyData.pointData,%0A    polyData.cellData%0A  ];%0A}%0Avar poly_data_transferables_default = polyDataTransferables;%0A%0A// dist/pipeline/web-workers/run-pipeline.js%0Aasync function runPipeline(pipelineModule, args, outputs, inputs) {%0A  const result = run_pipeline_emscripten_default(pipelineModule, args, outputs, inputs);%0A  const transferables = [];%0A  result.outputs.forEach(function(output) {%0A    if (output.type === interface_types_default.BinaryStream || output.type === interface_types_default.BinaryFile) {%0A      const binary = output.data;%0A      transferables.push(binary);%0A    } else if (output.type === interface_types_default.Image) {%0A      const image = output.data;%0A      transferables.push(...image_transferables_default(image));%0A    } else if (output.type === interface_types_default.Mesh) {%0A      const mesh = output.data;%0A      transferables.push(...mesh_transferables_default(mesh));%0A    } else if (output.type === interface_types_default.PolyData) {%0A      const polyData = output.data;%0A      transferables.push(...poly_data_transferables_default(polyData));%0A    }%0A  });%0A  return transfer(result, get_transferables_default(transferables, true));%0A}%0Avar run_pipeline_default = runPipeline;%0A%0A// dist/pipeline/web-workers/itk-wasm-pipeline.worker.js%0Avar workerOperations = {%0A  runPipeline: async function(pipelinePath, pipelineBaseUrl, args, outputs, inputs, pipelineQueryParams) {%0A    const pipelineModule = await load_pipeline_module_default(pipelinePath, pipelineBaseUrl, pipelineQueryParams);%0A    return await run_pipeline_default(pipelineModule, args, outputs, inputs);%0A  }%0A};%0Aexpose(workerOperations);%0A/*! Bundled license information:%0A%0Acomlink/dist/esm/comlink.mjs:%0A  (**%0A   * @license%0A   * Copyright 2019 Google LLC%0A   * SPDX-License-Identifier: Apache-2.0%0A   *)%0A*/%0A';

// src/index-worker-embedded.ts
setPipelineWorkerUrl(itk_wasm_pipeline_worker_default);
export {
  float_types_default as FloatTypes,
  image_default as Image,
  image_type_default as ImageType,
  int_types_default as IntTypes,
  interface_types_default as InterfaceTypes,
  mesh_default as Mesh,
  mesh_type_default as MeshType,
  pixel_types_default as PixelTypes,
  point_set_default as PointSet,
  point_set_type_default as PointSetType,
  poly_data_default as PolyData,
  poly_data_type_default as PolyDataType,
  transform_default as Transform,
  transform_parameterizations_default as TransformParameterizations,
  transform_type_default as TransformType,
  worker_pool_default as WorkerPool,
  buffer_to_typed_array_default as bufferToTypedArray,
  cast_image_default as castImage,
  copy_image_default as copyImage,
  create_web_worker_default as createWebWorker,
  getDefaultWebWorker,
  get_file_extension_default as getFileExtension,
  get_matrix_element_default as getMatrixElement,
  getPipelineWorkerUrl,
  getPipelinesBaseUrl,
  getPipelinesQueryParams,
  image_shared_buffer_or_copy_default as imageSharedBufferOrCopy,
  mesh_to_poly_data_default as meshToPolyData,
  poly_data_to_mesh_default as polyDataToMesh,
  read_dicom_tags_default as readDICOMTags,
  read_dicom_tags_array_buffer_default as readDICOMTagsArrayBuffer,
  read_image_array_buffer_default as readImageArrayBuffer,
  read_image_blob_default as readImageBlob,
  read_image_dicom_array_buffer_series_default as readImageDICOMArrayBufferSeries,
  read_image_dicom_file_series_default as readImageDICOMFileSeries,
  read_image_file_default as readImageFile,
  read_image_file_series_default as readImageFileSeries,
  read_mesh_array_buffer_default as readMeshArrayBuffer,
  read_mesh_file_default as readMeshFile,
  run_pipeline_default as runPipeline,
  setDefaultWebWorker,
  set_matrix_element_default as setMatrixElement,
  setPipelineWorkerUrl,
  setPipelinesBaseUrl,
  setPipelinesQueryParams,
  stack_images_default as stackImages,
  version_default as version
};
/*! Bundled license information:

comlink/dist/esm/comlink.mjs:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: Apache-2.0
   *)
*/
